@* @inherits InputBase<bool> *@

@{ var icon = "e-icons " + (IsCollapsed ? "e-triangleDown" : "e-triangleRight"); }
<div class="e-icons">
    <SfButton type="button"  @oninput="@(async _ => await ValueChanged.InvokeAsync(IsCollapsed))" CssClass="e-primary e-round" 
              IconCss="@icon" @onclick="@(() => { IsCollapsed = !IsCollapsed; })"/>
</div>



@code {

    private bool IsCollapsed
    {
        get => isCollapsed;
        set
        {
            if (ValueChanged.HasDelegate)
            {
                ValueChanged.InvokeAsync(value);
            }
            isCollapsed = value;
        }
    }

    [Parameter]
    public EventCallback<bool> ValueChanged { get; set; }
    // protected override bool TryParseValueFromString(string value, out bool result, out string validationErrorMessage)
    // {
    //     validationErrorMessage = "Value must be a valid boolean";
    //     return bool.TryParse(value, out result);
    // }
    private bool isCollapsed;
}

@* <style> *@
@*     .e-triangleDown:before { *@
@*         content: '\e7d8'; *@
@*     } *@
@*      *@
@*     .e-triangleUp:before { *@
@*         content: '\e7df'; *@
@*     } *@
@*      *@
@*     .e-triangleRight:before { *@
@*         content: '\e7f9'; *@
@*     } *@
@* *@
@* </style> *@
