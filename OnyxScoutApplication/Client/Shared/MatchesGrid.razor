@using Microsoft.AspNetCore.Components.Rendering
@using Syncfusion.Blazor.Popups
@inject NavigationManager NavigationManager
@inject ILocalStorageService StorageService
@inject ISessionStorageService SessionStorage
@inject ISyncLocalStorageService SyncStorageService
@inject TheBlueAllianceService TheBlueAllianceService
@inject ScoutFormService ScoutFormService

@if (Matches != null && Settings != null && teamsNamesByNumber is not null)
{
    if (!string.IsNullOrWhiteSpace(Settings.PagingScopeName))
    {
        <SfButton OnClick="SavePageNumber">Save page number</SfButton>
    }

    <SfGrid @ref="@grid" DataSource="@Matches" AllowSorting="true" AllowFiltering="true" Height="@Settings.Height" AllowPaging="@Settings.AllowPaging">
        <GridPageSettings PageSize="10"></GridPageSettings>
        <GridEvents Created="OnLoad" QueryCellInfo="CustomizeCell" TValue="Match"></GridEvents>
        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
        <GridColumns>
            <GridColumn Field=@nameof(Match.FullMatchNumber) AutoFit="false" HeaderText="No." Width="80px"></GridColumn>
            <GridColumn Field=@nameof(Match.Date) AutoFit="false" HeaderText="Match date" Format="dd/MM/yyyy HH:mm" Type="ColumnType.DateTime" Width="135px"></GridColumn>
            @for (int i = 0; i < 3; i++)
            {
                var headName = "T" + (i + 1);
                int index = i;
                <GridColumn HeaderText="@headName" AutoFit="false" Width="50px">
                    <Template>
                        @{
                            var match = (Match)context;
                            var teamNumber = match.Alliances.Blue.GetTeamAt(index);
                            string teamName = "Oops! who is that?!";
                            if (teamsNamesByNumber.TryGetValue(teamNumber, out var value))
                            {
                                teamName = value;
                            }
                            <SfTooltip ID="Tooltip" Position="Position.TopCenter" WindowCollision="true" Target="#blueTeamNumber" Content="@teamName">
                                <span class="@GetTeamTextStyle(teamNumber, match.Key)" id="blueTeamNumber" @onclick="@(async () => await OnGridTeamClicked(match, teamNumber))">@(teamNumber)</span>
                            </SfTooltip>
                        }
                    </Template>
                </GridColumn>
            }
            <GridColumn Field="Alliances.Blue.Score" AutoFit="false" HeaderText="Score" TextAlign="TextAlign.Right" Width="100px"></GridColumn>
            <GridColumn Field="Alliances.Red.Score" AutoFit="false" HeaderText="Score" TextAlign="TextAlign.Left" Width="100px"></GridColumn>
            @for (int i = 0; i < 3; i++)
            {
                var headName = "T" + (i + 1);
                int index = i;
                <GridColumn HeaderText="@headName" AutoFit="false" Width="50px">
                    <Template>
                        @{
                            var match = (Match)context;
                            var teamNumber = match.Alliances.Red.GetTeamAt(index);
                            string teamName = "Oops! who is that?!";
                            if (teamsNamesByNumber.TryGetValue(teamNumber, out var value))
                            {
                                teamName = value;
                            }
                            <SfTooltip ID="Tooltip" Position="Position.TopCenter" WindowCollision="true" Target="#redTeamNumber" Content="@teamName">
                                <span class="@GetTeamTextStyle(teamNumber, match.Key)" id="redTeamNumber" @onclick="() => OnGridTeamClicked(match, teamNumber)">@(teamNumber)</span>
                            </SfTooltip>
                        }
                    </Template>
                </GridColumn>
            }
            <GridColumn HeaderText="Win" AutoFit="false" Width="70px"></GridColumn>
        </GridColumns>
    </SfGrid>
}

<CascadingValue Value="this" IsFixed="true">
    @ChildContent
</CascadingValue>

@code {

    [Parameter]
    public List<Match> Matches { get; set; }

    [Parameter]
    public MatchGridSettings Settings { get; set; }

    [Parameter]
    public EventCallback<TeamInMatch> OnTeamClicked { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private SfGrid<Match> grid;
    private Dictionary<int, string> teamsNamesByNumber;
    private List<SimpleFormDto> forms;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        var teams = await TheBlueAllianceService.GetTeams();
        teamsNamesByNumber = teams.ToDictionary(k => k.TeamNumber, i => i.Nickname);
        forms = await ScoutFormService.GetMainGameForms();
    }

    private async Task OnLoad(object obj)
    {
        if (!string.IsNullOrWhiteSpace(Settings.PagingScopeName) &&
            await StorageService.ContainKeyAsync("MatchGridPage." + Settings.PagingScopeName))
        {
            var v = await StorageService.GetItemAsync<int>("MatchGridPage." + Settings.PagingScopeName);
            await grid.GoToPageAsync(v);
        }
    }

    private void SavePageNumber()
    {
        SyncStorageService.SetItem("MatchGridPage." + Settings.PagingScopeName, grid.PageSettings.CurrentPage);
    }


    private string GetTeamTextStyle(int teamNumber, string matchName) //Team's text style (bold, color and clickable)
    {
        string classes = "";
        if (teamNumber == Settings.TeamNumber)
        {
            classes += "targetTeam ";
        }
        else
        {
            classes += "clickable ";
        }

        if (Settings.SubmittedForms == null) return classes;

        if (Settings.SubmittedForms.Any(form => form.TeamNumber == teamNumber && form.KeyName == matchName))
        {
            classes += "filledTeamForm ";
            classes += "clickable ";
        }
        // else if (SyncStorageService.ContainKey($"ScoutForm/{matchName}/{teamNumber}"))
        else if (forms.Any(f => f.TeamNumber == teamNumber && f.KeyName == matchName))
        {
            classes += "locallyFilledTeamForm ";
        }
        else
        {
            classes += "notFilledTeamForm ";
        }
        return classes;
    }

    private async Task OnGridTeamClicked(Match match, int teamNumber)
    {
        if (Settings.SubmittedForms == null)
        {
            await OnTeamClicked.InvokeAsync(new TeamInMatch
            {
                TeamNumber = teamNumber, Match = match,
                IsFormExists = false
            });
            return;
        }

        var form = Settings.SubmittedForms.SingleOrDefault(form => form.TeamNumber == teamNumber
                                                                   && form.KeyName == match.Key);

        await OnTeamClicked.InvokeAsync(new TeamInMatch
        {
            TeamNumber = teamNumber, Match = match,
            IsFormExists = form != null, Form = form
        });
    }

    private static void CustomizeCell(QueryCellInfoEventArgs<Match> args)
    {
        if (args.Column.Index is >= 2 and <= 5) //Cell color based on alliance color
        {
            args.Cell.AddClass(new[] { "blue" });
        }
        else if (args.Column.Index is >= 6 and <= 9)
        {
            args.Cell.AddClass(new[] { "red" });
        }
        else if (args.Column.HeaderText == "Win") //"WinningAlliance" Cell color
        {
            args.Cell.AddClass(new[] { args.Data.WinningAlliance });
        }
    }

    public void Refresh()
    {
        StateHasChanged();
    }

}

<style>
    .red {
        background-color: indianred;    
        font-size: 14px;
        user-select: none;
    }

    .blue {
        background-color: royalblue;
        font-size: 14px;
        user-select: none;
    }

    .targetTeam {
        font-weight: bold;
        font-size: 14px;
        user-select: none;
    }

    .clickable {
        cursor: pointer;
        font-size: 14px;
        user-select: none;
    }

    .filledTeamForm {
        color: lawngreen;
        font-size: 14px;
        user-select: none;
    }
    
    .locallyFilledTeamForm {
        color: orange;
        font-size: 14px;
        user-select: none;
    }

    .notFilledTeamForm {
        color: black;
        font-size: 14px;
        user-select: none;
    }
</style>
