@using Syncfusion.Blazor.DropDowns
@inject HttpClientManager Http
@inject ILocalStorageService LocalStorage

<SfDropDownList TValue="int?" TItem="int?" Width="150px" PopupHeight="150px" PopupWidth="150px" Placeholder="Select a year" Value="SelectedYearFiltter" DataSource="@filtterYears">
    <DropDownListEvents TItem="int?" TValue="int?" OnValueSelect="OnYearFillterChange"></DropDownListEvents>
</SfDropDownList>


<SfDropDownList TValue="string" TItem="string" Width="200px" PopupHeight="200px" PopupWidth="200px" Placeholder="Select a country" Value="SelecteCountryFiltter" DataSource="@filtterCountries">
        <DropDownListEvents TItem="string" TValue="string" OnValueSelect="OnCountryFillterChange"></DropDownListEvents>
</SfDropDownList>
<br />

<SfDropDownList TValue="string" TItem="Event" Width="355px" PopupHeight="355px" PopupWidth="355px" Placeholder="Select an event" Value="lastEventKey" DataSource="@events">
        <DropDownListEvents TItem="Event" TValue="string" OnValueSelect="OnEventChange"></DropDownListEvents>
        <DropDownListFieldSettings Text="Name" Value="Key"></DropDownListFieldSettings>
    </SfDropDownList>


@code {
    [Parameter]
    public EventCallback<Event> OnEventSelctionChange { get; set; }
    public int? SelectedYearFiltter { get; set; } = 0;
    public string SelecteCountryFiltter { get; set; }
    public Event SelectedEvent { get; set; } = new Event();
    private List<Event> events;
    private List<int?> filtterYears = new List<int?>();
    private List<string> filtterCountries = new List<string>();
    private string lastEventKey;


    protected override async Task OnInitializedAsync()
    {
        for (int i = DateTime.Now.Year - 5; i <= DateTime.Now.Year + 5; i++)
        {
            filtterYears.Add(i);
        }
        filtterCountries.Add("Israel");
        if (await LocalStorage.ContainKeyAsync("EventSelector/SelectedEventKey"))
        {
            SelectedYearFiltter = await LocalStorage.GetItemAsync<int>("EventSelector/SelectedYearFiltter");
            SelecteCountryFiltter = await LocalStorage.GetItemAsync<string>("EventSelector/SelecteCountryFiltter");
            SelectedEvent = await LocalStorage.GetItemAsync<Event>("EventSelector/SelectedEventKey");
            StateHasChanged();
            await UpdateEventsList();
            await OnEventChange(new Syncfusion.Blazor.DropDowns.SelectEventArgs<Event>() { ItemData = SelectedEvent });
        }
        else
        {

            await OnYearFillterChange(new Syncfusion.Blazor.DropDowns.SelectEventArgs<int?>() { ItemData = DateTime.Now.Year });
            await OnCountryFillterChange(new Syncfusion.Blazor.DropDowns.SelectEventArgs<string>() { ItemData = filtterCountries[0] });
        }
    }

    private async Task UpdateEventsList()
    {
        var result = await Http.GetJson<List<Event>>("TheBlueAlliance/GetAllEvents/" + SelectedYearFiltter);
        events = result.OrderBy(i => i.StartDate).Where(i => string.Equals(i.Country, SelecteCountryFiltter, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    private async Task OnYearFillterChange(Syncfusion.Blazor.DropDowns.SelectEventArgs<int?> args)
    {
        SelectedYearFiltter = args.ItemData;
        Console.WriteLine("VALUE: " + SelectedYearFiltter);
        StateHasChanged();
        await UpdateEventsList();
        await LocalStorage.SetItemAsync("EventSelector/SelectedYearFiltter", SelectedYearFiltter);
    }

    private async Task OnCountryFillterChange(Syncfusion.Blazor.DropDowns.SelectEventArgs<string> args)
    {
        SelecteCountryFiltter = args.ItemData;
        StateHasChanged();
        await UpdateEventsList();
        await LocalStorage.SetItemAsync("EventSelector/SelecteCountryFiltter", SelecteCountryFiltter);
    }

    private async Task OnEventChange(Syncfusion.Blazor.DropDowns.SelectEventArgs<Event> args)
    {
        SelectedEvent = args.ItemData;
        if (SelectedEvent == null || lastEventKey == SelectedEvent.Key)
        {
            return;
        }
        lastEventKey = SelectedEvent.Key;
        StateHasChanged();
        await LocalStorage.SetItemAsync("EventSelector/SelectedEventKey", SelectedEvent);
        await OnEventSelctionChange.InvokeAsync(SelectedEvent);
    }
}