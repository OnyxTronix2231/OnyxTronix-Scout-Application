@using Syncfusion.Blazor.DropDowns
@inject HttpClientManager Http
@inject ILocalStorageService LocalStorage
@inject EventService EventService

<SfDropDownList TValue="int?" TItem="int?" Width="150px" PopupHeight="150px" PopupWidth="150px" Placeholder="Select a year" Value="selectedYearFilter" DataSource="@filterYears">
    <DropDownListEvents TItem="int?" TValue="int?" OnValueSelect="OnYearFilterChange"></DropDownListEvents>
</SfDropDownList>


<SfDropDownList TValue="string" TItem="string" Width="200px" PopupHeight="200px" PopupWidth="200px" Placeholder="Select a country" Value="selectedCountryFilter" DataSource="@filterCountries">
    <DropDownListEvents TItem="string" TValue="string" OnValueSelect="OnCountryFilterChange"></DropDownListEvents>
</SfDropDownList>
<br/>
@if (events != null)
{
    <SfDropDownList TValue="string" TItem="Event" Width="355px" PopupHeight="355px" PopupWidth="355px" Placeholder="Select an event" Value="lastEventKey" DataSource="@events">
        <DropDownListEvents TItem="Event" TValue="string" OnValueSelect="OnEventChange"></DropDownListEvents>
        <DropDownListFieldSettings Text="Name" Value="Key"></DropDownListFieldSettings>
    </SfDropDownList>
}


@code {

    [Parameter]
    public EventCallback<Event> OnEventSelectionChange { get; set; }

    private int? selectedYearFilter = 0;
    private string selectedCountryFilter;
    private Event selectedEvent = new();
    private List<Event> events;
    private List<int?> filterYears = new();
    private List<string> filterCountries = new();
    private string lastEventKey;


    protected override async Task OnInitializedAsync()
    {
        for (int i = DateTime.Now.Year - 5; i <= DateTime.Now.Year; i++)
        {
            filterYears.Add(i);
        }
        filterCountries.Add("Israel");
        selectedEvent = await EventService.GetSelectedEvent();
        if (selectedEvent is not null)
        {
            selectedYearFilter = selectedEvent.Year;
            selectedCountryFilter = selectedEvent.Country;
            await UpdateEventsList(await LocalStorage.GetItemAsync<List<Event>>("EventSelector.Filtered"));
            UpdateSelectedEvent(selectedEvent);
        }
        else
        {
            // await OnYearFilterChange(new SelectEventArgs<int?> {ItemData = DateTime.Now.Year});
            // await HandleOnFilterChange(DateTime.Now.Year);
            // await OnCountryFilterChange(new SelectEventArgs<string> {ItemData = filterCountries[0]});
                        // await HandleOnCountryFilterChange();
            selectedYearFilter = DateTime.Now.Year;
            selectedCountryFilter = filterCountries[0];
            await HandleOnFilterChange();
        }
    }

    private async Task OnYearFilterChange(SelectEventArgs<int?> args)
    {
        if (args.ItemData is null)
        {
            return;
        }
        selectedYearFilter  = args.ItemData.Value;
        await HandleOnFilterChange();
    }

    private async Task OnCountryFilterChange(SelectEventArgs<string> args)
    {
        selectedCountryFilter = args.ItemData;
        await HandleOnFilterChange();
    }
    
    private async Task HandleOnFilterChange()
    {
        await UpdateEventsList(await Http.GetJson<List<Event>>("TheBlueAlliance/GetAllEvents/" + selectedYearFilter));
        StateHasChanged();
    }
    
    private async Task UpdateEventsList(List<Event> eventsToOrder)
    {
        events = eventsToOrder.Where(i => string.Equals(i.Country, selectedCountryFilter, 
            StringComparison.OrdinalIgnoreCase)).OrderBy(i => i.StartDate).ToList();
        await LocalStorage.SetItemAsync("EventSelector.Filtered", events);
    }

    private async Task OnEventChange(SelectEventArgs<Event> args)
    {
        UpdateSelectedEvent(args.ItemData);
        await EventService.SetSelectedEvent(args.ItemData);
        await OnEventSelectionChange.InvokeAsync(selectedEvent);
    }

    private void UpdateSelectedEvent(Event gameEvent)
    {
        selectedEvent = gameEvent;
        if (selectedEvent == null || lastEventKey == selectedEvent.Key)
        {
            return;
        }
        lastEventKey = selectedEvent.Key;
        StateHasChanged();
    }

}
