@using Syncfusion.Blazor.Spinner

@inherits LayoutComponentBase
@inject NotificationManager NotificationManager
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject AppManager AppManager
@inject ServiceManager ServiceManager

<div class="page">
    <div class="sidebar">
        <NavMenu/>
    </div>
    <Toast></Toast>

    <div class="main">
        <div class="top-row px-4 auth">
            <div >
                <SfButton class="e-warning" @onclick="HandleRefreshButtonClick" style="margin-right: 5px">
                    Refresh
                </SfButton>
            </div>
            <div>
                <SfSpinner @bind-Visible="@ServiceManager.IsLoading">
                </SfSpinner>
            </div>

            <SfButton CssClass="e-danger" Disabled="!AppManager.IsOnlineMode"
                      @onclick="() => AppManager.IsOnlineMode = false">
                Offline
            </SfButton>

            <SfButton CssClass="e-success" Disabled="AppManager.IsOnlineMode"
                      @onclick="() => AppManager.IsOnlineMode = true">
                Online
            </SfButton>

            <LoginDisplay/>
            <span>V2.8.2</span>
        </div>
        <div class="content px-4">
            @if (finishedInit)
            {
                @Body
            }
        </div>
    </div>
</div>

@code{
    bool finishedInit;

    protected override async Task OnInitializedAsync()
    {
        await JsRuntime
            .InvokeAsync<object>(
                "blazorFuncs.registerClient",
                new object[] { DotNetObjectReference.Create(this) }
            );

        await ServiceManager.CleanAndInitAllServices();

        finishedInit = true;
    }

    [JSInvokable("onUpdateAvailable")]
    public async Task<string> AppUpdate()
    {
        Console.WriteLine("New version available");
        StateHasChanged();
        await NotificationManager.NotifyAsync("Update available", "Please refresh the page", NotificationType.Warning,
            0, new NotficationButton { Content = "Refresh", Action = RefreshPage });
        return await Task.FromResult("Alerted client");
    }

    private void RefreshPage(object arg)
    {
        NavigationManager.NavigateTo("/", true);
    }

    private async Task HandleRefreshButtonClick()
    {
        await ServiceManager.CleanAndInitAllServices(true);
    }

}