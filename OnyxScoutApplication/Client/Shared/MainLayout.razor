@using Microsoft.JSInterop;
@using OnyxScoutApplication.Shared.Models.ScoutFormModels

@inherits LayoutComponentBase
@inject NotificationManager NotificationManager
@inject NavigationManager NavigationManager
@inject HttpClientManager Http
@inject ISyncLocalStorageService LocalStorage
@inject ISyncSessionStorageService SessionStorage
@inject IJSRuntime JsRuntime

<div class="page">
    <div class="sidebar">
        <NavMenu/>
    </div>
    <Toast></Toast>

    <div class="main">
        <div class="top-row px-4 auth">
            <LoginDisplay/>
            <span>V0.90</span>
        </div>
        <div class="content px-4">
            @if (finishedInit)
            {
                @Body
            }
        </div>
    </div>
</div>

@code{
    bool finishedInit;

    protected override async Task OnInitializedAsync()
    {
        await JsRuntime
            .InvokeAsync<object>(
                "blazorFuncs.registerClient",
                new object[] {DotNetObjectReference.Create(this)}
            );

        if (LocalStorage.ContainKey("EventSelector/SelectedEventKey"))
        {
            Event selectedEvent = LocalStorage.GetItem<Event>("EventSelector/SelectedEventKey");
            Console.WriteLine("key: " + selectedEvent.Key);
            var matches = await Http.GetJson<List<Match>>("TheBlueAlliance/GetAllMatches/" + selectedEvent.Key);
            SessionStorage.SetItem("TheBlueAlliance.AllMatches", matches);

            var scoutForms = await Http.GetJson<List<FormDto>>("ScoutForm/GetAllByEvent/" + selectedEvent.Key);
            SessionStorage.SetItem("ScoutForms.All", scoutForms);

            var events = await Http.GetJson<List<Event>>("TheBlueAlliance/GetAllEvents/" + selectedEvent.Year);
            if (events != null) //user is probably not authorized 
            {
                events = events.OrderBy(i => i.StartDate).Where(i => string.Equals(i.Country, selectedEvent.Country, StringComparison.OrdinalIgnoreCase)).ToList();
                SessionStorage.SetItem("TheBlueAlliance.AllEvents", events);
            }
        }
        finishedInit = true;
    }

    [JSInvokable("onUpdateAvailable")]
    public async Task<string> AppUpdate()
    {
        Console.WriteLine("New version available");
        StateHasChanged();
        NotificationManager.Notify("Update available", "Please refresh the page", NotificationType.Warning, 0,
            new Syncfusion.Blazor.Notifications.ToastButton {Content = "Refresh", OnClick = EventCallback.Factory.Create(this, RefreshPage)});
        return await Task.FromResult("Alerted client");
    }

    private void RefreshPage(MouseEventArgs mouseEventArgs)
    {
        NavigationManager.NavigateTo("/", true);
    }

}
