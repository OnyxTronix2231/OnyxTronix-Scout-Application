@using Microsoft.JSInterop;
@using OnyxScoutApplication.Shared.Models.ScoutFormModels
@using Action = System.Action

@inherits LayoutComponentBase
@inject NotificationManager NotificationManager
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject AppManager AppManager
@inject ServiceManager ServiceManager

<div class="page">
    <div class="sidebar">
        <NavMenu/>
    </div>
    <Toast></Toast>

    <div class="main">
        <div class="top-row px-4 auth">
            <div >
                <SfButton class="e-warning" @onclick="HandleRefreshButtonClick" style="margin-right: 5px">Refresh</SfButton>
            </div>
            <SfButton CssClass="@(AppManager.IsOnlineMode ? "e-danger" : "e-success")"
                      @onclick="() => AppManager.IsOnlineMode = !AppManager.IsOnlineMode"
                      >
                @(AppManager.IsOnlineMode ? "Switch to offline" : "Switch to online")


            </SfButton>
            <LoginDisplay/>
            <span>V2.8.2</span>
        </div>
        <div class="content px-4">
            @if (finishedInit)
            {
                @Body
            }
        </div>
    </div>
</div>

@code{
    bool finishedInit;

    protected override async Task OnInitializedAsync()
    {
        await JsRuntime
            .InvokeAsync<object>(
                "blazorFuncs.registerClient",
                new object[] { DotNetObjectReference.Create(this) }
            );

        await ServiceManager.CleanAndInitAllServices();

    // if (LocalStorage.ContainKey("EventSelector/SelectedEventKey"))
        {
    // Event selectedEvent = LocalStorage.GetItem<Event>("EventSelector/SelectedEventKey");

    // var matches = await Http.GetJson<List<Match>>("TheBlueAlliance/GetAllMatches/" + selectedEvent.Key);
    // SessionStorage.SetItem("TheBlueAlliance.AllMatches", matches);

    // await TheBlueAllianceService.OnInit();

    // var scoutForms = await Http.GetJson<List<SimpleFormDto>>("ScoutForm/GetAllByEvent/" + selectedEvent.Key);
    // SessionStorage.SetItem("ScoutForms.All", scoutForms);

    //await ScoutFormService.OnInit();

    // var events = await Http.GetJson<List<Event>>("TheBlueAlliance/GetAllEvents/" + selectedEvent.Year);
    // if (events != null) //user is probably not authorized 
    // {
    //     events = events.Where(i => string.Equals(i.Country, selectedEvent.Country,
    //         StringComparison.OrdinalIgnoreCase)).OrderBy(i => i.StartDate).ToList();
    //     SessionStorage.SetItem("TheBlueAlliance.AllEvents", events);
    // }

    // var teams = await Http.GetJson<List<Team>>("TheBlueAlliance/GetAllTeams/" + selectedEvent.Key);
    // SessionStorage.SetItem("TheBlueAlliance.AllTeams", teams);


    // var form = await Http.GetJson<FormDto>("ScoutFormFormat/TemplateScoutFormByYear/" + selectedEvent.Year);
    // SessionStorage.SetItem("ScoutFormFormat.TemplateScoutFormByYear." + selectedEvent.Year, form);
        }
        finishedInit = true;
    }

    [JSInvokable("onUpdateAvailable")]
    public async Task<string> AppUpdate()
    {
        Console.WriteLine("New version available");
        StateHasChanged();
        await NotificationManager.NotifyAsync("Update available", "Please refresh the page", NotificationType.Warning,
            0, new NotficationButton { Content = "Refresh", Action = RefreshPage });
        return await Task.FromResult("Alerted client");
    }

    private void RefreshPage(object arg)
    {
        NavigationManager.NavigateTo("/", true);
    }

    private async Task HandleRefreshButtonClick()
    {
        await ServiceManager.CleanAndInitAllServices(true);
    }

}