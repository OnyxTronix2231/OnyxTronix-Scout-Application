@using Microsoft.JSInterop;

@inherits LayoutComponentBase
@inject NotificationManager NotificationManager
@inject NavigationManager NavigationManager
@inject HttpClientManager Http
@inject ISyncLocalStorageService LocalStorage

@inject IJSRuntime  JSRuntime

<div class="sidebar">
    <NavMenu />
</div>
<Toast></Toast>

<div class="main">
    <div class="top-row px-4 auth">
        <LoginDisplay />
        <span>V0.1</span>
    </div>
    <div class="content px-4">
        @if (finishedInit) 
        {
            @Body
        }
    </div>
</div>
@code{
    bool updateReady;
    bool finishedInit = false;
    protected override async Task OnInitializedAsync()
    {
        await JSRuntime
          .InvokeAsync<object>(
            "blazorFuncs.registerClient",
            new object[] { DotNetObjectReference.Create(this) }
          );

        if (LocalStorage.ContainKey("EventSelector/SelectedEventKey"))
        {
            Event selectedEvent = LocalStorage.GetItem<Event>("EventSelector/SelectedEventKey");

            var matches = await Http.GetJson<List<Match>>("TheBlueAlliance/GetAllMatches/" + selectedEvent.Key);
            LocalStorage.SetItem("TheBlueAlliance.AllMatches", matches);

            var scoutForms = await Http.GetJson<List<ScoutFormDto>>("ScoutForm/GetAllByEvent/" + selectedEvent.Key);
            LocalStorage.SetItem("ScoutForms.All", scoutForms);

            var events = await Http.GetJson<List<Event>>("TheBlueAlliance/GetAllEvents/" + selectedEvent.Year);
            if (events != null) //user is probably not authorized 
            {
                events = events.OrderBy(i => i.StartDate).Where(i => string.Equals(i.Country, selectedEvent.Country, StringComparison.OrdinalIgnoreCase)).ToList();
                LocalStorage.SetItem("TheBlueAlliance.AllEvents", events);
            }
        }
        finishedInit = true;
    }

    [JSInvokable("onupdateavailable")]
    public async Task<string> AppUpdate()
    {
        Console.WriteLine("New version available");
        updateReady = true;
        StateHasChanged();
        NotificationManager.Notify("Update available", "Please refresh the page", NotificationType.Warning, 0,
            new Syncfusion.Blazor.Notifications.ToastButton() { Content = "Refresh", OnClick = EventCallback.Factory.Create(this, RefreshPage) });
        return await Task.FromResult("Alerted client");
    }

    private void RefreshPage(MouseEventArgs mouseEventArgs)
    {
        NavigationManager.NavigateTo("/", true);
    }
}