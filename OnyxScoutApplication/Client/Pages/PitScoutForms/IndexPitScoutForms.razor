@page "/PitScoutForms"
@using OnyxScoutApplication.Shared.Models.ScoutFormModels
@using System.Security.Claims
@using FailureEventArgs = Syncfusion.Blazor.Inputs.FailureEventArgs
@inject NavigationManager NavigationManager
@inject HttpClientManager Http
@inject ILocalStorageService LocalStorage
@inject NotificationManager NotificationManager;
@attribute [OnyxAuthorize(Role = Role.Scouter)]
<h1>ScoutForms</h1>
@if (scoutForms == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <SfGrid FrozenColumns="1" AllowTextWrap="false" DataSource="@scoutForms"
            AllowFiltering="true" AllowResizing="false" AllowSorting="true" AllowMultiSorting="true"
            ShowColumnChooser="true" Width="100%" Height="100%">
        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
        <GridColumns>
            <GridColumn ShowInColumnChooser="false" HeaderText="Team" Field="TeamNumber" 
                        AllowFiltering="true"
                        FilterSettings="@(new FilterSettings { Type = Syncfusion.Blazor.Grids.FilterType.CheckBox })"
                        Width="70px">
            </GridColumn>
            
            <GridColumn AutoFit="true" ShowInColumnChooser="false" HeaderText="Year" Field="Year"
                        AllowFiltering="true" 
                        FilterSettings="@(new FilterSettings { Type = Syncfusion.Blazor.Grids.FilterType.Excel })">
            </GridColumn>
            
            <GridColumn AutoFit="true" ShowInColumnChooser="false" HeaderText="Key name" Field="KeyName"
                        AllowFiltering="true" Type="ColumnType.String"
                        FilterSettings="@(new FilterSettings { Type = Syncfusion.Blazor.Grids.FilterType.Excel })">
            </GridColumn>
            
            <GridColumn AutoFit="true" ShowInColumnChooser="false" HeaderText="Writer user name" Field="WriterUserName"
                         AllowFiltering="true" Type="ColumnType.String"
                         FilterSettings="@(new FilterSettings { Type = Syncfusion.Blazor.Grids.FilterType.Excel })">
            </GridColumn>
            
    
            <GridColumn AutoFit="true" AllowReordering="false" ShowInColumnChooser="false" HeaderText=""
                        Field="" AllowFiltering="false">
                <Template>
                    @{
                        var scoutForm = (SimpleFormDto)context;
                        <div>
                            @{ bool isAllowedToEdit = user.Identity!.Name == scoutForm.WriterUserName
                                                      || user.IsInRole(Role.Admin.ToString());}
                            <SfButton CssClass="@(isAllowedToEdit ? "e-warning" : "")" @onclick="() => Edit(scoutForm)" 
                                      Disabled="@(!isAllowedToEdit)">Edit
                            </SfButton>
                            <ButtonTabOpener CssClass="e-info" Url="@($"PitScoutForm/View/{scoutForm.Id}")" Style="margin-left :5px"  
                                             Text="View">
                            </ButtonTabOpener>
                        </div>
                    }
                </Template>
            </GridColumn>
            
    
    
        </GridColumns>
    </SfGrid>
}


@code {
    
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    private ClaimsPrincipal user;
    private List<SimpleFormDto> scoutForms;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        user = authState.User;
        Event selectedEvent = await LocalStorage.GetItemAsync<Event>("EventSelector/SelectedEventKey");
        if (selectedEvent is null)
        {
            await NotificationManager.NotifyAsync("Please select an event first", "", NotificationType.Warning);
            NavigationManager.NavigateTo("/");
            return;
        }
        scoutForms = await Http.GetJson<List<SimpleFormDto>>($"ScoutForm/GetAllByEvent/{selectedEvent.Key}/{ScoutFormType.Pit}" );
    }

    private void Edit(SimpleFormDto form)
    {
        NavigationManager.NavigateTo("PitScoutForm/Edit/" + form.Id);
    }
}
