@page "/EventAnalytics"
@using OnyxScoutApplication.Shared.Models.ScoutFormFormatModels
@using OnyxScoutApplication.Shared.Models.ScoutFormModels
@using Syncfusion.Blazor.Data
@inject ILocalStorageService LocalStorage
@inject ISessionStorageService SessionStorage
@inject HttpClientManager Http
@inject NavigationManager NavigationManager
@inject NotificationManager NotificationManager
@attribute [OnyxAuthorize(Role = Role.Scouter)]

@if (teams != null)
{
    <DateTimeRangePicker MinDate="minDate" MaxDate="maxDate" OnDateTimeRangeSelected="OnDateTimeRangeSelected"></DateTimeRangePicker>
    <br/>
    <h6>Selected @selectedScoutForms.Count forms</h6>
    <br/>
    <EventAnalyticGrid Teams="teams" ScoutFormFormatDto="format" ScoutForms="selectedScoutForms"
                       EventAnalyticSettings="analyticSettings"/>
}

@code {
    private Event selectedEvent;
    private List<FormDto> scoutForms = new();
    private List<FormDto> selectedScoutForms = new();
    private List<Team> teams = new();
    private ScoutFormFormatDto format = new();
    private EventAnalyticSettingsDto analyticSettings;
    private DateTime minDate;
    private DateTime maxDate;

    protected override async Task OnInitializedAsync()
    {
        selectedEvent = await LocalStorage.GetItemAsync<Event>("EventSelector/SelectedEventKey");
        if (selectedEvent is null)
        {
            await NotificationManager.NotifyAsync("Please select an event first", "", NotificationType.Warning);
            NavigationManager.NavigateTo("/");
            return;
        }
        
        format = await Http.GetJson<ScoutFormFormatDto>("ScoutFormFormat/ByYear/" + selectedEvent.Year);
        if (format is null)
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        scoutForms = await Http.GetJson<List<FormDto>>("ScoutForm/GetAllByEventWithData/" + selectedEvent.Key);
        selectedScoutForms = scoutForms.ToList();
        
        if (await LocalStorage.ContainKeyAsync("EventAnalyticSettings/" + selectedEvent.Key))
        {
            analyticSettings = await LocalStorage.GetItemAsync<EventAnalyticSettingsDto>("EventAnalyticSettings/" + selectedEvent.Key);
        }
        
        teams = await SessionStorage.GetItemAsync<List<Team>>("TheBlueAlliance.AllTeams");
        
        var formsByDates = scoutForms.OrderBy(f => f.DateTime).ToList();
        if (!scoutForms.Any())
        {
            return;
        }
        minDate = formsByDates.First().DateTime.DateTime - TimeSpan.FromMinutes(5);
        maxDate = formsByDates.Last().DateTime.DateTime + TimeSpan.FromMinutes(5);
    }
    
    /*private void RangeSelectHandler(RangePickerEventArgs<DateTime?> args)
    {
        selectedScoutForms = scoutForms.Where(f => f.DateTime <= maxDate && f.DateTime >= minDate).ToList();
    }*/
    /*private void StartValueChangeHandler(ChangedEventArgs<DateTime?> args)
    {
        selectedScoutForms = scoutForms.Where(f => f.DateTime <= endDateTime && f.DateTime >= startDateTime).ToList();
        StateHasChanged();
        Console.WriteLine($"chose {selectedScoutForms.Count} forms");
    }*/

    private void OnDateTimeRangeSelected(DateTimeRangePicker.DateTimeSelectedEventArgs obj)
    {
        selectedScoutForms = scoutForms.
            Where(f => f.DateTime <= obj.EndDateTime && f.DateTime >= obj.StartDateTime).ToList();
    }
}
