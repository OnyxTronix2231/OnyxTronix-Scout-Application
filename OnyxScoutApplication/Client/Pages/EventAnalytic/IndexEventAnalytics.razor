@page "/EventAnalytics"
@using OnyxScoutApplication.Shared.Models.ScoutFormFormatModels
@using OnyxScoutApplication.Shared.Models.ScoutFormModels
@inject ILocalStorageService LocalStorage
@inject HttpClientManager Http
@inject NavigationManager NavigationManager
@inject NotificationManager NotificationManager
@attribute [OnyxAuthorize(Role = Role.Scouter)]

@if (format != null)
{
    <EventAnalyticGrid Teams="teams" ScoutFormFormatDto="format" ScoutForms="scoutForms"
                       OnTeamClicked="OnTeamClicked" EventAnalyticSettings="analyticSettings"/>
}

@code {
    private Event selectedEvent;
    private List<FormDto> scoutForms = new List<FormDto>();
    private List<Team> teams = new List<Team>();
    private ScoutFormFormatDto format = new ScoutFormFormatDto();
    private EventAnalyticSettingsDto analyticSettings;

    protected override async Task OnInitializedAsync()
    {
        selectedEvent = await LocalStorage.GetItemAsync<Event>("EventSelector/SelectedEventKey");
        if (selectedEvent == null)
        {
            NotificationManager.Notify("Please select an event first", "", NotificationType.Warning);
            NavigationManager.NavigateTo("/");
            return;
        }

        scoutForms = await Http.GetJson<List<FormDto>>("ScoutForm/GetAllByEvent/" + selectedEvent.Key);
        teams = await Http.GetJson<List<Team>>("TheBlueAlliance/GetAllTeams/" + selectedEvent.Key);
        if (await LocalStorage.ContainKeyAsync("EventAnalyticSettings/" + selectedEvent.Key))
        {
            analyticSettings = await LocalStorage.GetItemAsync<EventAnalyticSettingsDto>("EventAnalyticSettings/" + selectedEvent.Key);
        }
        format = await Http.GetJson<ScoutFormFormatDto>("ScoutFormFormat/ByYear/" + selectedEvent.Year);
    }

    private void OnTeamClicked(int teamNumber)
    {
        NavigationManager.NavigateTo("TeamDetails/" + teamNumber);
    }

}
