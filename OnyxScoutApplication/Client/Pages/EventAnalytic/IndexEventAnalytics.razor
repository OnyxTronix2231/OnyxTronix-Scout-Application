@page "/EventAnalytics"
@using OnyxScoutApplication.Shared.Models.ScoutFormFormatModels
@using OnyxScoutApplication.Shared.Models.ScoutFormModels
@using OnyxScoutApplication.Shared.Other.Analyzers
@using Syncfusion.Blazor.Data
@using System.Dynamic
@inject ILocalStorageService LocalStorage
@inject ISessionStorageService SessionStorage
@inject HttpClientManager Http
@inject NavigationManager NavigationManager
@inject NotificationManager NotificationManager
@attribute [OnyxAuthorize(Role = Role.Scouter)]

<DateTimeRangePicker MinDate="minDate" MaxDate="maxDate" OnDateTimeRangeSelected="OnDateTimeRangeSelected"></DateTimeRangePicker>

@if (selectedScoutForms is not null && calculatedTeamsData is not null && columnsFields is not null)
{
    <br/>
    <h6>Selected @selectedScoutForms.Count forms</h6>
    <br/>
    <EventAnalyticGrid CalculatedTeamsData=@calculatedTeamsData ColumnsFields="@columnsFields"/>
}

@code {
    private Event selectedEvent;
    private List<SimpleFormDto> scoutForms;
    private List<SimpleFormDto> selectedScoutForms;
    private EventAnalyticSettingsDto analyticSettings;
    private List<ExpandoObject> calculatedTeamsData;
    private List<ColumnField> columnsFields;
    private DateTime minDate;
    private DateTime maxDate;

    protected override async Task OnInitializedAsync()
    {
        selectedEvent = await LocalStorage.GetItemAsync<Event>("EventSelector/SelectedEventKey");
        if (selectedEvent is null)
        {
            await NotificationManager.NotifyAsync("Please select an event first", "", NotificationType.Warning);
            NavigationManager.NavigateTo("/");
            return;
        }

        if (await LocalStorage.ContainKeyAsync("EventAnalyticSettings/" + selectedEvent.Key))
        {
            analyticSettings = await LocalStorage.GetItemAsync<EventAnalyticSettingsDto>("EventAnalyticSettings/" + selectedEvent.Key);
        }

        scoutForms = await SessionStorage.GetItemAsync<List<SimpleFormDto>>("ScoutForms.All");
        selectedScoutForms = scoutForms.ToList();

        var formsByDates = scoutForms.OrderBy(f => f.DateTime).ToList();
        if (!scoutForms.Any())
        {
            return;
        }
        minDate = formsByDates.First().DateTime.DateTime - TimeSpan.FromMinutes(5);
        maxDate = formsByDates.Last().DateTime.DateTime + TimeSpan.FromMinutes(5);
    }

    private async Task OnDateTimeRangeSelected(DateTimeRangePicker.DateTimeSelectedEventArgs obj)
    {
        selectedScoutForms = scoutForms.
            Where(f => f.DateTime <= obj.EndDateTime && f.DateTime >= obj.StartDateTime).ToList();
        var analyticsRes = await Http.TryPostJson<AnalyticsResult>
            ($"EventAnalytics/GetEventAnalytics/{selectedEvent.Year}/{selectedEvent.Key}", new AnalyticsSettings { StartDate = obj.StartDateTime, EndDate = obj.EndDateTime, EventAnalyticSettingsDto = analyticSettings });
        calculatedTeamsData = analyticsRes.CalculatedTeamsData;
        analyticsRes.ColumnsFields.ForEach(i => Console.WriteLine(i.MarkupName.Value));
        columnsFields = analyticsRes.ColumnsFields;
    }

}
