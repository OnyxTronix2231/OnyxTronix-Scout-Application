@using System.Dynamic
@inherits TeamsAnalyzer
<div>
    @if (CalculatedTeamsData != null)
    {
        string s = (250 + ColumnsFields.Count * 200).ToString() + "px";
        <SfGrid DataSource="@CalculatedTeamsData" AllowReordering="true" AllowFiltering="true" ShowColumnChooser="true" Toolbar=@toolbarItems AllowResizing="true" AllowSorting="true" Width="@s">
            <GridColumns>
                <GridColumn Field="TeamNumber" HeaderText="Team" Width="10px">
                    <Template>
                        @{
                            var v = (dynamic)context;
                            <div><span class="clickable" @onclick="() => OnTeamGridClicked(v.TeamNumber)"> @(v.Nickname)</span></div>
                            <div><span class="clickable" @onclick="() => OnTeamGridClicked(v.TeamNumber)">@(v.TeamNumber)</span></div>
                        }
                    </Template>
                </GridColumn>
                @for (int i = 0; i < ColumnsFields.Count; i++)
                {
                    int index = i;
                    string width = ColumnsFields[index].FieldType == FieldType.OptionSelect ? "10px" : "5px";
                    string name = ColumnsFields[index].NameId;
                    string rawValue = "RawValue" + name;
                    <GridColumn HeaderText="@ColumnsFields[index].Name" Field="@rawValue" AllowReordering="true" AllowResizing="true" Width="@width">
                        <Template>
                            @{
                                var v = (IDictionary<string, object>)context;
                                var s = new MarkupString(v[name].ToString());
                            }
                            <span>@s</span>
                        </Template>
                    </GridColumn>
                }
            </GridColumns>
        </SfGrid>
    }
</div>

@code {
    [Parameter]
    public EventCallback<int> OnTeamClicked { get; set; }
    // private List<FieldDto> allFields;
    private string[] toolbarItems = new string[] { "ColumnChooser" };


    private void OnTeamGridClicked(int teamNumber)
    {
        OnTeamClicked.InvokeAsync(teamNumber);
    }

    private class TeamAverage
    {
        public Team Team { get; set; }
        public List<TeamFieldAverage> TeamFieldAverage { get; set; }
    }
}
<style>
    .clickable {
        cursor: pointer
    }
</style>