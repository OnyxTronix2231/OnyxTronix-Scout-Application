@using System.Dynamic
@inject TeamDataAnalyzer TeamDataAnalyzer
<div>
    @if (Fields != null)
    {
        string s = (250 + Fields.Count * 200).ToString() + "px";
    <SfGrid DataSource="@calculatedData" AllowReordering="true" AllowFiltering="true" ShowColumnChooser="true" Toolbar=@toolbarItems AllowResizing="true" AllowSorting="true" Width="@s">
        <GridColumns>
            <GridColumn Field="TeamNumber" HeaderText="Team" Width="10px">
                <Template>
                    @{
                        var v = (dynamic)context;
                        <div><span class="clickable" @onclick="() => OnTeamGridClicked(v.TeamNumber)"> @(v.Nickname)</span></div>
                        <div><span class="clickable" @onclick="() => OnTeamGridClicked(v.TeamNumber)">@(v.TeamNumber)</span></div>
                    }
                </Template>
            </GridColumn>
            @for (int i = 0; i < allFields.Count; i++)
            {
                int index = i;
                string width = allFields[index].FieldType == FieldType.OptionSelect ? "10px" : "5px";
                string name = allFields[index].NameId;
                string rawValue = "RawValue" + name;
                <GridColumn HeaderText="@allFields[index].Name" Field="@rawValue" AllowReordering="true" AllowResizing="true" TextAlign="allFields[index].FieldType == FieldType.OptionSelect ? TextAlign.Left : TextAlign.Left" Width="@width">
                    <Template>
                        @{
                            var v = (IDictionary<string, object>)context;
                            var s = new MarkupString(v[name].ToString());
                        }
                        <span>@s</span>
                    </Template>
                </GridColumn>
            }
        </GridColumns>
    </SfGrid>
    }
</div>

@code {
    [Parameter]
    public List<ScoutFormDto> ScoutForms { get; set; }
    [Parameter]
    public List<Team> Teams { get; set; }
    [Parameter]
    public List<FieldDto> Fields { get; set; }
    [Parameter]
    public Func<ScoutFormDto, List<ScoutFormDataDto>> GetTragetList { get; set; }
    [Parameter]
    public EventCallback<int> OnTeamClicked { get; set; }
    private List<FieldDto> allFields;
    private List<ExpandoObject> calculatedData;
    private string[] toolbarItems = new string[] { "ColumnChooser" };

    protected override void OnParametersSet()
    {
        allFields = Fields.ConcatAllCascadeFields();

        var data = new List<ExpandoObject>();

        foreach (var team in Teams)
        {
            List<TeamFieldAverage> avgs = TeamDataAnalyzer.CalculateDataFor(Fields, ScoutForms.Where(i => i.TeamNumber == team.TeamNumber).ToList(), GetTragetList, s => true).ToList();
            dynamic row = new ExpandoObject();
            ((IDictionary<String, Object>)row).Add("TeamNumber", team.TeamNumber);
            ((IDictionary<String, Object>)row).Add("Nickname", team.Nickname);

            foreach (var field in allFields)
            {
                var teamAvg = avgs.First(i => i.Field.NameId == field.NameId);
                ((IDictionary<String, Object>)row).Add(field.NameId, teamAvg.GetFormatedAverage().Value);
                ((IDictionary<String, Object>)row).Add("RawValue" + field.NameId, teamAvg.GetRelativeValue());
            }
            data.Add(row);
        }
        calculatedData = data;
    }

    private void OnTeamGridClicked(int teamNumber)
    {
        OnTeamClicked.InvokeAsync(teamNumber);
    }

    private class TeamAverage
    {
        public Team Team { get; set; }
        public List<TeamFieldAverage> TeamFieldAverage { get; set; }
    }
}
<style>
    .clickable {
        cursor: pointer
    }
</style>