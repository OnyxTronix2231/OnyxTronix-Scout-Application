@inject TeamDataAnalyzer TeamDataAnalyzer
<div>
    @if (Fields != null)
    {
        string s = (250 + Fields.Count * 200).ToString() + "px";
        List<FieldDto> allFields = Fields.ConcatAllCascadeFields();
        <div>
            <div>
                <SfDropDownList TItem="FieldDto" TValue="string" Placeholder="Select field name to sort by" DataSource="allFields" @bind-Value="@name" Width="250px">
                    <DropDownListFieldSettings Text="Name" Value="Name"></DropDownListFieldSettings>
                    <DropDownListEvents TItem="FieldDto" TValue="string" ValueChange="e => OnSortValueChange(e)"></DropDownListEvents>
                </SfDropDownList>
            </div>
        </div>


        <SfGrid DataSource="@calculatedData" AllowFiltering="true" AllowExcelExport="true" ShowColumnChooser="true" Toolbar=@toolbarItems AllowResizing="true" AllowSorting="true" AllowMultiSorting="true" Width="@s">
            <GridColumns>
                <GridColumn Field="Team.TeamNumber" HeaderText="Team" Width="10px">
                    <Template>
                        @{
                            var v = (TeamAverage)context;
                            <div><span class="clickable" @onclick="() => OnTeamGridClicked(v.Team.TeamNumber)"> @(v.Team.Nickname)</span></div>
                            <div><span class="clickable" @onclick="() => OnTeamGridClicked(v.Team.TeamNumber)">@(v.Team.TeamNumber)</span></div>
                        }
                    </Template>
                </GridColumn>
                @for (int i = 0; i < allFields.Count; i++)
                {
                    int index = i;
                    string width = allFields[index].FieldType == FieldType.OptionSelect ? "10px" : "5px";
                    <GridColumn HeaderText="@allFields[index].Name" AllowResizing="true" TextAlign="allFields[index].FieldType == FieldType.OptionSelect ? TextAlign.Left : TextAlign.Left" Width="@width">
                        <Template>
                            @{
                                var v = (TeamAverage)context;
                                var s = v.TeamFieldAverage.First(i => i.Field.NameId == allFields[index].NameId).GetFormatedAverage();
                            }
                            <span>@s</span>
                        </Template>
                    </GridColumn>
                }
            </GridColumns>
        </SfGrid>
    }
</div>

@code {
    [Parameter]
    public List<ScoutFormDto> ScoutForms { get; set; }
    [Parameter]
    public List<Team> Teams { get; set; }
    [Parameter]
    public List<FieldDto> Fields { get; set; }
    [Parameter]
    public Func<ScoutFormDto, List<ScoutFormDataDto>> GetTragetList { get; set; }
    [Parameter]
    public EventCallback<int> OnTeamClicked { get; set; }
    private List<TeamAverage> calculatedData;
    private string name = "";
    private string[] toolbarItems = new string[] { "ColumnChooser", "ExcelExport" };

    protected override void OnParametersSet()
    {
        List<TeamAverage> data = new List<TeamAverage>();
        foreach (var team in Teams)
        {
            List<TeamFieldAverage> avgs = TeamDataAnalyzer.CalculateDataFor(Fields, ScoutForms.Where(i => i.TeamNumber == team.TeamNumber).ToList(), GetTragetList, s => true).ToList();

            // avgs.ForEach(i => i.Average = float.IsNormal(i.Average) ? i.Average : 0); //TODO: Remove when support for Nan is added in syncfution
            data.Add(new TeamAverage { Team = team, TeamFieldAverage = avgs });
        }
        calculatedData = data;
    }

    private void OnTeamGridClicked(int teamNumber)
    {
        OnTeamClicked.InvokeAsync(teamNumber);
    }
    
    private void OnSortValueChange(ChangeEventArgs<string, FieldDto> args)
    {
        if (args.ItemData == null)
        { 
            return;
        }
        calculatedData = calculatedData.OrderByDescending(pair1 => pair1.TeamFieldAverage.Where(f => f.Field.NameId == args.ItemData.NameId).Single()).ToList();
    }

    private class TeamAverage
    {
        public Team Team { get; set; }
        public List<TeamFieldAverage> TeamFieldAverage { get; set; }
    }
}
<style>
    .clickable {
        cursor: pointer
    }
</style>