@page "/EventAnalytics/Settings"
@using OnyxScoutApplication.Shared.Models.ScoutFormFormatModels
@inject ILocalStorageService LocalStorage
@inject HttpClientManager Http
@inject NavigationManager NavigationManager
@inject NotificationManager NotificationManager
@inject ScoutFormFormatService ScoutFormFormatService
@inject EventService EventService

@attribute [OnyxAuthorize(Role = Role.Scouter)]

<h3>Select numric field to show combined result</h3>

<br/>
@if (analyticSettings != null)
{
    @foreach (var combinedField in analyticSettings.CombinedFields)
    {
        <div class="form-group col-sm-5">
            <label>Name:</label>
            <br/>
            <SfTextBox @bind-Value="@combinedField.Name" Width="250px"/>

            <br/>
            <label>Type:</label>
            <br/>
            <SfDropDownList TItem="CombinedFieldsType" TValue="CombinedFieldsType" Placeholder="Select type"
                            DataSource="Enum.GetValues<CombinedFieldsType>()"
                            @bind-Value="combinedField.CombinedFieldsType" Width="250px">
            </SfDropDownList>
            <br/>
            <br/>
            <div>
                <label>Columns:</label>
                <br/>
                @for (int i = 0; i < combinedField.Fields.Count; i++)
                {
                    FieldDto field = combinedField.Fields[i];
                    int index = i;
                    <div>
                        <SfDropDownList TItem="FieldDto" TValue="Guid" Placeholder="Select field" DataSource="fields" Value="field.Id" Width="250px">
                            <DropDownListFieldSettings Text="Name" Value="Id"></DropDownListFieldSettings>
                            <DropDownListEvents TItem="FieldDto" TValue="Guid" ValueChange="e => OnFieldSelected(e, combinedField.Fields, index)"></DropDownListEvents>
                        </SfDropDownList>
                        <SfButton CssClass="e-danger" @onclick="() => combinedField.Fields.Remove(field)">Remove this column</SfButton>
                    </div>
                    <br/>
                }
                <SfButton @onclick="() => AddField(combinedField)">Add column</SfButton>
            </div>
        </div>
        <br/>
    }


    <br/>
    <SfButton @onclick="AddCombinedField">Add combined columns</SfButton>

    <br/>

    <br/>

    <SfButton CssClass="e-success" @onclick="SaveSettings">Save</SfButton>
}


@code {
    private Event selectedEvent;
    private ScoutFormFormatDto format = new();
    private EventAnalyticSettingsDto analyticSettings;
    private List<FieldDto> fields = new();

    protected override async Task OnInitializedAsync()
    {
        selectedEvent = await EventService.GetSelectedEvent();
        if (selectedEvent == null)
        {
            await NotificationManager.NotifyAsync("Please select an event first", "", NotificationType.Warning);
            NavigationManager.NavigateTo("/");
            return;
        }
        // format = await Http.GetJson<ScoutFormFormatDto>("ScoutFormFormat/ByYear/" + selectedEvent.Year);
        format = await ScoutFormFormatService.GetMainGameScoutFormFormat();
        if (format == null)
        {
            NavigationManager.NavigateTo("/");
            return;
        }
        if (await LocalStorage.ContainKeyAsync("EventAnalyticSettings/" + selectedEvent.Key))
        {
            analyticSettings = await LocalStorage.GetItemAsync<EventAnalyticSettingsDto>("EventAnalyticSettings/" + selectedEvent.Key);
        }
        else
        {
            analyticSettings = new EventAnalyticSettingsDto();
        }
        fields = format.FieldsInStages.SelectMany(i => i.Fields.WithCascadeFields()).
            Where(i => i.FieldType == FieldType.Integer).ToList();
    }

    private void AddCombinedField()
    {
        analyticSettings.CombinedFields.Add(new CombinedFieldsDto());
    }

    private void OnFieldSelected(ChangeEventArgs<Guid, FieldDto> args, IList<FieldDto> combinedFields, int index)
    {
        if (args.ItemData == null)
        {
            return;
        }
        combinedFields[index] = args.ItemData;
    }

    private async Task SaveSettings()
    {
        analyticSettings.CombinedFields.ForEach(i => i.Fields.RemoveAll(f => string.IsNullOrEmpty(f.Name)));
        analyticSettings.CombinedFields.RemoveAll(i => i.Fields.Count <= 1);
        await LocalStorage.SetItemAsync("EventAnalyticSettings/" + selectedEvent.Key, analyticSettings);
        NavigationManager.NavigateTo("EventAnalytics");
    }

    private static void AddField(CombinedFieldsDto combinedFields)
    {
        combinedFields.Fields.Add(new FieldDto());
    }

}
