@page "/UsersManager/ChangePasswordFor/{Name}"
@inject HttpClientManager Http
@inject NavigationManager NavigationManager

@attribute [Authorize(Roles = "Owner")]

@if (user == null)
{
    <h4>Loading....</h4>
}
else
{
    <EditForm Model="@user" OnValidSubmit="@OnValidSubmit">
        <FluentValidationValidator/>
        <ValidationSummary/>
        
        <div class="form-group col-sm-5">
            <label for="userName">User name</label>
            <input class="form-control" type="text" id="userName" value="@user.UserName" readonly="readonly"/>
        </div>
        <div class="form-group col-sm-5">
            <label >New passsword</label>
            <SfTextBox Type="InputType.Password" @bind-Value="@user.NewPassword"></SfTextBox>
            <ValidationMessage For="() => user.NewPassword"/>

            <label >Confirm new password</label>
            <SfTextBox Type="InputType.Password" @bind-Value="@user.ConfirmedNewPassword"></SfTextBox>
            <ValidationMessage For="() => user.ConfirmedNewPassword"/>
            </div>
        <div>
            <button type="submit" class="btn btn-primary"> Save </button>
        </div>
    </EditForm>
}

@code {

    [Parameter]
    public string Name { get; set; }

    private ApplicationUserDto user;

    protected override async Task OnInitializedAsync()
    {
        user = await Http.GetJson<ApplicationUserDto>("ApplicationUser/" + Name);
        if (user == null)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task OnValidSubmit()
    {
        if (await Http.TryPutJson("ApplicationUser/" + user.UserName, user))
        {
            NavigationManager.NavigateTo("UsersManager");
        }
    }

}
