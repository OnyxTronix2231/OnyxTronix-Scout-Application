@page "/UsersManager/Edit/{Name}"
@inject HttpClientManager Http
@inject NavigationManager NavigationManager


@if (user == null)
{
    <h4>Loading....</h4>
}
else
{
    <EditForm Model="@user" OnValidSubmit="@OnValidSubmit">
        <FluentValidationValidator/>
        <ValidationSummary/>
        <div class="form-group col-sm-5">
            <label for="userName">User name</label>
            <input class="form-control" type="text" id="userName" value="@user.UserName" readonly="readonly"/>
        </div>
        <div class="form-group col-sm-5">
            <label for="matchName">Roles</label>
            <SfButton Type="button" CssClass="e-success" OnClick="() => AddNewRole()">Add</SfButton>

            @foreach (ApplicationUserRoleDto applicationUserRole in user.UserRoles)
            {
                <SfDropDownList TValue="string" TItem="ApplicationRoleDto" DataSource="roles" @bind-Value="@applicationUserRole.RoleId">
                    <DropDownListFieldSettings Text="Name" Value="Id"></DropDownListFieldSettings>
                    <DropDownListEvents TItem="ApplicationRoleDto" TValue="string" ValueChange="s => OnValueSelect(applicationUserRole, s)"></DropDownListEvents>

                </SfDropDownList>

                <SfButton Type="button" CssClass="e-danger" OnClick="() => RemoveRole(applicationUserRole)">Remove</SfButton>
            }
        </div>
        <div>
            <button type="submit" class="btn btn-primary"> Save </button>
        </div>
    </EditForm>
}

@code {

    [Parameter]
    public string Name { get; set; }

    private ApplicationUserDto user;
    private List<ApplicationRoleDto> roles;

    protected override async Task OnInitializedAsync()
    {
        roles = await Http.GetJson<List<ApplicationRoleDto>>("ApplicationUser/GetAllRoles");
        user = await Http.GetJson<ApplicationUserDto>("ApplicationUser/" + Name);
        if (user == null)
        {
            NavigationManager.NavigateTo("/");
            return;
        }
        Console.WriteLine("USERRRRR NAMEEEEE: " + user.UserName);
    }

    public async Task OnValidSubmit()
    {
        if (await Http.TryPutJson("ApplicationUser/" + user.UserName, user))
        {
            NavigationManager.NavigateTo("UsersManager");
        }
    }

    public void RemoveRole(ApplicationUserRoleDto applicationUserRole)
    {
        user.UserRoles.Remove(applicationUserRole);
    }

    public void OnValueSelect(ApplicationUserRoleDto applicationUserRole, Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, ApplicationRoleDto> args)
    {
        Console.WriteLine(args.Value);
        applicationUserRole.Role = roles.FirstOrDefault(i => i.Id == args.Value);
        applicationUserRole.User = user;
    }

    public void AddNewRole()
    {
        user.UserRoles.Add(new ApplicationUserRoleDto() {Role = roles[roles.Count - 1], RoleId = roles[roles.Count - 1].Id});
    }

}
