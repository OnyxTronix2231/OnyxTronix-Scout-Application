@page "/"
@using OnyxScoutApplication.Shared.Models.ScoutFormModels
@inject ISyncLocalStorageService SyncLocalStorage
@inject HttpClientManager Http
@inject NavigationManager NavigationManager
@inject ISessionStorageService SessionStorage
@inject ILocalStorageService LocalStorage
@attribute [OnyxAuthorize(Role = Role.Scouter)]

<h1>Events</h1>

<div>
    <EventSelector OnEventSelectionChange="UpdateMatchTable"></EventSelector>
    <div style="float: right">
        <SfButton class="e-warning" @onclick="RefreshData">Refresh</SfButton>
    </div>
</div>

<div>
    <MatchesGrid Matches="qMatches" OnTeamClicked="OnTeamClicked">
        <MatchGridSettings SubmittedForms = "@scoutForms" AllowPaging = "true" PagingScopeName = "qMatches" ></MatchGridSettings>
    </MatchesGrid>
</div>

<br/>
<div>
     <MatchesGrid Matches="qfMatches" OnTeamClicked="OnTeamClicked">
         <MatchGridSettings SubmittedForms = "@scoutForms" ></MatchGridSettings>
     </MatchesGrid>
</div>

<br/>
<div>
    <MatchesGrid Matches="sfMatches" OnTeamClicked="OnTeamClicked">
        <MatchGridSettings SubmittedForms = "@scoutForms" ></MatchGridSettings>
    </MatchesGrid>
</div>

<br/>
<div>
    <MatchesGrid Matches="fMatches" OnTeamClicked="OnTeamClicked">
        <MatchGridSettings SubmittedForms = "@scoutForms"></MatchGridSettings>
    </MatchesGrid>
</div>

@code {
    private List<Match> qMatches = new();
    private List<Match> qfMatches = new();
    private List<Match> sfMatches = new();
    private List<Match> fMatches = new();
    private List<FormDto> scoutForms;

    protected override async Task OnInitializedAsync()
    {
        if (await SessionStorage.ContainKeyAsync("TheBlueAlliance.AllMatches"))
        {
            var matches = await SessionStorage.GetItemAsync<List<Match>>("TheBlueAlliance.AllMatches");
            scoutForms = await SessionStorage.GetItemAsync<List<FormDto>>("ScoutForms.All");
            UpdateByMatches(matches);
        }
    }
    
    private async Task UpdateMatchTable(Event selectedEvent)
    {
        var matches = await Http.GetJson<List<Match>>("TheBlueAlliance/GetAllMatches/" + selectedEvent.Key);
        await SessionStorage.SetItemAsync("TheBlueAlliance.AllMatches", matches);
        scoutForms = await Http.GetJson<List<FormDto>>("ScoutForm/GetAllByEvent/" + selectedEvent.Key);
        await SessionStorage.SetItemAsync("ScoutForms.All", scoutForms);
        var teams = await Http.GetJson<List<Team>>("TheBlueAlliance/GetAllTeams/" + selectedEvent.Key);
        await SessionStorage.SetItemAsync("TheBlueAlliance.AllTeams", teams);
        UpdateByMatches(matches);
    }

    private void UpdateByMatches(List<Match> matches)
    {
        matches = matches.OrderBy(i => i.Date).ToList();
        qMatches = matches.Where(i => i.Level == "qm").ToList();
        qfMatches = matches.Where(i => i.Level == "qf").ToList();
        sfMatches = matches.Where(i => i.Level == "sf").ToList();
        fMatches = matches.Where(i => i.Level == "f").ToList();

    }

    private void OnTeamClicked(TeamInMatch teamInMatch)
    {
        if (!teamInMatch.IsFormExists)
        {
            SyncLocalStorage.SetItem("ScoutForm/TeamInMatch", teamInMatch);
            NavigationManager.NavigateTo("ScoutForm/Create");
        }
        else
        {
            NavigationManager.NavigateTo("TeamDetails/" + teamInMatch.TeamNumber);
        }
    }

    private async Task RefreshData()
    {
        if (await LocalStorage.ContainKeyAsync("EventSelector/SelectedEventKey"))
        {
            Event selectedEvent = await LocalStorage.GetItemAsync<Event>("EventSelector/SelectedEventKey");
            var matches = await Http.GetJson<List<Match>>("TheBlueAlliance/GetAllMatches/" + selectedEvent.Key);
            if (matches is not null)
            {
                await SessionStorage.SetItemAsync("TheBlueAlliance.AllMatches", matches);
            }

            var scoutForms = await Http.GetJson<List<FormDto>>("ScoutForm/GetAllByEvent/" + selectedEvent.Key);
            if (scoutForms is not null)
            {
                await SessionStorage.SetItemAsync("ScoutForms.All", scoutForms);
            }

            var events = await Http.GetJson<List<Event>>("TheBlueAlliance/GetAllEvents/" + selectedEvent.Year);
            if (events != null) //user is probably not authorized 
            {
                events = events.Where(i => string.Equals(i.Country, selectedEvent.Country,
                    StringComparison.OrdinalIgnoreCase)).OrderBy(i => i.StartDate).ToList();
                await SessionStorage.SetItemAsync("TheBlueAlliance.AllEvents", events);
            }
            
            var teams = await Http.GetJson<List<Team>>("TheBlueAlliance/GetAllTeams/" + selectedEvent.Key);
            if (teams is not null)
            {
                await SessionStorage.SetItemAsync("TheBlueAlliance.AllTeams", teams);
            }

            await OnInitializedAsync();
        }
    }

}
