@page "/"
@inject ILocalStorageService LocalStorage
@inject HttpClientManager Http
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Admin, Normal")]

<h1>Events</h1>

<div><EventSelector OnEventSelctionChange="UpdateMatchTable"></EventSelector></div>

<div><MatchesGrid Matches="qMatches" SubmittedForms="data" Height="400" OnTeamClicked="OnTeamClicked"></MatchesGrid></div>

<br />
<div><MatchesGrid Matches="qfMatches" SubmittedForms="data"></MatchesGrid></div>

<br />
<div><MatchesGrid Matches="sfMatches" SubmittedForms="data"></MatchesGrid></div>

<br />
<div><MatchesGrid Matches="fMatches" SubmittedForms="data"></MatchesGrid></div>

@code {
    private List<Match> qMatches = new List<Match>();
    private List<Match> qfMatches = new List<Match>();
    private List<Match> sfMatches = new List<Match>();
    private List<Match> fMatches = new List<Match>();
    private List<ScoutFormDto> data = new List<ScoutFormDto>();

    private async Task UpdateMatchTable(Event selectedEvent)
    {
        var result = await Http.GetJson<List<Match>>("TheBlueAlliance/GetAllMatches/" + selectedEvent.Key);
        data = await Http.GetJson<List<ScoutFormDto>>("ScoutForm");
        result = result.OrderBy(i => i.Date).ToList();
        qMatches = result.Where(i => i.Level == "qm").ToList();
        qfMatches = result.Where(i => i.Level == "qf").ToList();
        sfMatches = result.Where(i => i.Level == "sf").ToList();
        fMatches = result.Where(i => i.Level == "f").ToList();
    }

    private async Task OnTeamClicked(TeamInMatch teamInMatch)
    {
        if (!teamInMatch.IsFormExists)
        {
            await LocalStorage.SetItemAsync("ScoutForm/TeamInMatch", teamInMatch);
            NavigationManager.NavigateTo("ScoutForm/Create");
        }
        else
        {
            await LocalStorage.SetItemAsync("TeamDetails/TeamNumber", teamInMatch.TeamNumber);
            NavigationManager.NavigateTo("TeamDetails");
        }
    }
}

