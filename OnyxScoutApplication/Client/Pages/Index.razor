@page "/"
@using OnyxScoutApplication.Shared.Models.ScoutFormModels
@inject ISyncLocalStorageService syncLocalStorage
@inject HttpClientManager http
@inject NavigationManager navigationManager
@inject ISessionStorageService sessionStorage
@attribute [OnyxAuthorize(Role = Role.Scouter)]

<h1>Events</h1>

<div>
    <EventSelector OnEventSelectionChange="UpdateMatchTable"></EventSelector>
</div>

<div>
    <MatchesGrid Matches="qMatches" OnTeamClicked="OnTeamClicked">
        <MatchGridSettings SubmittedForms = "@scoutForms" AllowPaging = "true" PagingScopeName = "qMatches" ></MatchGridSettings>
    </MatchesGrid>
</div>

<br/>
<div>
     <MatchesGrid Matches="qfMatches" OnTeamClicked="OnTeamClicked">
         <MatchGridSettings SubmittedForms = "@scoutForms" ></MatchGridSettings>
     </MatchesGrid>
</div>

<br/>
<div>
    <MatchesGrid Matches="sfMatches" OnTeamClicked="OnTeamClicked">
        <MatchGridSettings SubmittedForms = "@scoutForms" ></MatchGridSettings>
    </MatchesGrid>
</div>

<br/>
<div>
    <MatchesGrid Matches="fMatches" OnTeamClicked="OnTeamClicked">
        <MatchGridSettings SubmittedForms = "@scoutForms"></MatchGridSettings>
    </MatchesGrid>
</div>

@code {
    private List<Match> qMatches = new List<Match>();
    private List<Match> qfMatches = new List<Match>();
    private List<Match> sfMatches = new List<Match>();
    private List<Match> fMatches = new List<Match>();
    private List<FormDto> scoutForms;

    protected override async Task OnInitializedAsync()
    {
        if (await sessionStorage.ContainKeyAsync("TheBlueAlliance.AllMatches"))
        {
            var matches = await sessionStorage.GetItemAsync<List<Match>>("TheBlueAlliance.AllMatches");
            scoutForms = await sessionStorage.GetItemAsync<List<FormDto>>("ScoutForms.All");
            UpdateByMatches(matches);
        }
    }
    
    private async Task UpdateMatchTable(Event selectedEvent)
    {
        var matches = await http.GetJson<List<Match>>("TheBlueAlliance/GetAllMatches/" + selectedEvent.Key);
        await sessionStorage.SetItemAsync("TheBlueAlliance.AllMatches", matches);
        scoutForms = await http.GetJson<List<FormDto>>("ScoutForm/GetAllByEvent/" + selectedEvent.Key);
        UpdateByMatches(matches);
    }

    private void UpdateByMatches(List<Match> matches)
    {
        matches = matches.OrderBy(i => i.Date).ToList();
        qMatches = matches.Where(i => i.Level == "qm").ToList();
        qfMatches = matches.Where(i => i.Level == "qf").ToList();
        sfMatches = matches.Where(i => i.Level == "sf").ToList();
        fMatches = matches.Where(i => i.Level == "f").ToList();

    }

    private void OnTeamClicked(TeamInMatch teamInMatch)
    {
        if (!teamInMatch.IsFormExists)
        {
            syncLocalStorage.SetItem("ScoutForm/TeamInMatch", teamInMatch);
            navigationManager.NavigateTo("ScoutForm/Create");
        }
        else
        {
            navigationManager.NavigateTo("TeamDetails/" + teamInMatch.TeamNumber);
        }
    }
}
