@page "/"
@inject ISyncLocalStorageService SyncLocalStorage
@inject NavigationManager NavigationManager
@inject ScoutFormService ScoutFormService
@inject TheBlueAllianceService TheBlueAllianceService
@inject ServiceManager ServiceManager
@inject AppManager AppManager

@attribute [OnyxAuthorize(Role = Role.Scouter)]

<h1>Events</h1>

<div>
    <EventSelector OnEventSelectionChange="UpdateMatchTable"></EventSelector>
</div>

<div style="float: right">
    <SfButton class="e-warning" @onclick="HandleRefreshButtonClick" style="margin-right: 5px">
        Refresh
    </SfButton>
    
    <SfButton CssClass="e-danger" Disabled="!AppManager.IsOnlineMode"
              @onclick="() => AppManager.IsOnlineMode = false">
        Offline
    </SfButton>

    <SfButton CssClass="e-success" Disabled="AppManager.IsOnlineMode"
              @onclick="() => AppManager.IsOnlineMode = true">
        Online
    </SfButton>
</div>
<br/>


@if (!isInit)
{
    Console.WriteLine("skippinggg");
    return;
}
@{
    Console.WriteLine("not skipping");
}
<div>
    <MatchesGrid Matches="qMatches" OnTeamClicked="OnTeamClicked">
        <MatchGridSettings SubmittedForms="@scoutForms" AllowPaging="true" PagingScopeName="qMatches"></MatchGridSettings>
    </MatchesGrid>
</div>

<br/>
<div>
    <MatchesGrid Matches="qfMatches" OnTeamClicked="OnTeamClicked">
        <MatchGridSettings SubmittedForms="@scoutForms"></MatchGridSettings>
    </MatchesGrid>
</div>

<br/>
<div>
    <MatchesGrid Matches="sfMatches" OnTeamClicked="OnTeamClicked">
        <MatchGridSettings SubmittedForms="@scoutForms"></MatchGridSettings>
    </MatchesGrid>
</div>

<br/>
<div>
    <MatchesGrid Matches="fMatches" OnTeamClicked="OnTeamClicked">
        <MatchGridSettings SubmittedForms="@scoutForms"></MatchGridSettings>
    </MatchesGrid>
</div>

@code {
    private List<Match> qMatches = new();
    private List<Match> qfMatches = new();
    private List<Match> sfMatches = new();
    private List<Match> fMatches = new();
    private List<SimpleFormDto> scoutForms;
    private bool isInit;

    protected override async Task OnInitializedAsync()
    {
        isInit = false;
        var matches = await TheBlueAllianceService.GetMatches();
        if (matches is null)
        {
            return;
        }
        scoutForms = await ScoutFormService.GetMainGameForms();
        UpdateByMatches(matches);
    }

    private async Task UpdateMatchTable(Event selectedEvent)
    {
        await ServiceManager.CleanAndInitAllServices();

        var matches = await TheBlueAllianceService.GetMatches();

        scoutForms = await ScoutFormService.GetMainGameForms();

        UpdateByMatches(matches);
    }

    private void UpdateByMatches(List<Match> matches)
    {
        matches = matches.OrderBy(i => i.Date).ToList();
        qMatches = matches.Where(i => i.Level == "qm").ToList();
        qfMatches = matches.Where(i => i.Level == "qf").ToList();
        sfMatches = matches.Where(i => i.Level == "sf").ToList();
        fMatches = matches.Where(i => i.Level == "f").ToList();
        isInit = true;
    }

    private void OnTeamClicked(TeamInMatch teamInMatch)
    {
        if (!teamInMatch.IsFormExists)
        {
            SyncLocalStorage.SetItem("ScoutForm/TeamInMatch", teamInMatch);
            NavigationManager.NavigateTo("ScoutForm/Create");
        }
        else
        {
            NavigationManager.NavigateTo("TeamDetails/" + teamInMatch.TeamNumber);
        }
    }

    private async Task HandleRefreshButtonClick()
    {
        await ServiceManager.CleanAndInitAllServices(true);
    }
}
