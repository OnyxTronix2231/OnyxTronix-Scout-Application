@page "/TeamDetails"
@inject HttpClientManager Http
@inject ILocalStorageService LocalStorage
@inject TeamDataAnalyzer TeamDataAnalyzer

@if (endGameCalculatedData.Count != 0)
{
    <h3>Team @teamNumber</h3>
    <h4>@selectedEvent?.Name</h4>

    <h5>Autonomous</h5>
    <TeamAnalyticGrid CalculatedData="autoCalculatedData"></TeamAnalyticGrid>
    <br />
    <h5>Teleoperated</h5>
    <TeamAnalyticGrid CalculatedData="teleopCalculatedData"></TeamAnalyticGrid>
    <br />
    <h5>End game</h5>
    <TeamAnalyticGrid CalculatedData="endGameCalculatedData"></TeamAnalyticGrid>
    <br />
    <MatchesGrid Matches="matches" TeamNumber="teamNumber" SubmittedForms="data"></MatchesGrid>
}
@code {
    private int teamNumber;
    private Event selectedEvent;
    private List<ScoutFormDto> data;
    private List<FieldAverage> autoCalculatedData = new List<FieldAverage>();
    private List<FieldAverage> teleopCalculatedData = new List<FieldAverage>();
    private List<FieldAverage> endGameCalculatedData = new List<FieldAverage>();
    private List<Match> matches;

    protected override async Task OnInitializedAsync()
    {
        teamNumber = await LocalStorage.GetItemAsync<int>("TeamDetails/TeamNumber");
        selectedEvent = await LocalStorage.GetItemAsync<Event>("EventSelector/SelectedEventKey");
        if (selectedEvent == null)
        {
            return;
        }
        var formate = await Http.GetJson<ScoutFormFormatDto>("ScoutFormFormat/ByYear/" + selectedEvent.Year);
        var result = await Http.GetJson<List<ScoutFormDto>>("ScoutForm/GetAllByTeam/" + teamNumber + "/" + selectedEvent.Key);
        data = result.OrderBy(i => i.MatchName).ToList();
        var matches = await Http.GetJson<List<Match>>("TheBlueAlliance/GetMatchesByTeamAndEvent/" + teamNumber + "/" + selectedEvent.Key);
        this.matches = matches.OrderBy(i => i.Date).ToList();
        autoCalculatedData.AddRange(TeamDataAnalyzer.CalculateDataFor(FieldStageType.Autonomous, formate.AutonomousFields, result));
        teleopCalculatedData.AddRange(TeamDataAnalyzer.CalculateDataFor(FieldStageType.Teleoperated, formate.TeleoperatedFields, result));
        endGameCalculatedData.AddRange(TeamDataAnalyzer.CalculateDataFor(FieldStageType.EndGame, formate.EndGameFields, result));
    }
}