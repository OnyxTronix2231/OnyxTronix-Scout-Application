@page "/TeamDetails/{TeamNumber:int}"
@using OnyxScoutApplication.Client.Others.Objects.Analyzers.TeamData
@using OnyxScoutApplication.Shared.Models.ScoutFormFormatModels
@using OnyxScoutApplication.Shared.Models.ScoutFormModels
@using System.IO
@inject HttpClientManager http
@inject HttpClient httpClient
@inject ILocalStorageService localStorage
@inject ISessionStorageService sessionStorage
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime

@attribute [OnyxAuthorize(Role = Role.Scouter)]

@if (calculatedScoutDataByStages is not null && calculatedPitScoutDataByStages is not null)
{
    <h3>Team @TeamNumber</h3>
    <h4>@teamName</h4>
    <h4>@selectedEvent?.Name</h4>
    @*<a href="/TeamDetails/Notes/@TeamNumber">Notes</a>*@
    <div>
    <CollapsibleView ValueChanged="@(i => isCollapsed = !i)"></CollapsibleView>
    </div>
    <div class="form-group col-lg-6 col-md-6 collapse @(!isCollapsed ? "show" : "")" style="padding-left:2em">
        <TeamNotes Forms="data"></TeamNotes>
         @if (pitScoutForms.Count != 0 && pitScoutForms[0].IsImageUploaded && !isCollapsed)
         {
             <br>
             string s = $"{pitScoutForms[0].ImageName}";
             <img src="@s" alt="@pitScoutForms[0].TeamNumber Robot image" class="img"
                  style="max-width: 400px; max-height: 400px"/>
         }
    </div>
   
    <br/>
    foreach (var (key, value) in calculatedScoutDataByStages)
    {
        <h5>@key</h5>
        <TeamAnalyticGrid CalculatedData="@value"></TeamAnalyticGrid>
        <br/>
    }
    
    <br/>
    <h4>Pit scouting</h4>
    <br/>

    foreach (var (key, value) in calculatedPitScoutDataByStages)
    {
        <h5>@key</h5>
        <TeamAnalyticGrid CalculatedData="@value"></TeamAnalyticGrid>
        <br/>
    }

    <br/>
    <MatchesGrid Matches="@matches" OnTeamClicked="@(async t => await OnTeamClicked(t))">
        <MatchGridSettings SubmittedForms = "@data" TeamNumber = "@TeamNumber" ></MatchGridSettings>
    </MatchesGrid>
}

@code {

    [Parameter]
    public int TeamNumber { get; set; }

    private string teamName;
    private Event selectedEvent;
    private List<FormDto> data;
    private Dictionary<string, List<TeamFieldAverage>> calculatedScoutDataByStages;
    private Dictionary<string, List<TeamFieldAverage>> calculatedPitScoutDataByStages;
    private List<FormDto> pitScoutForms;
    private List<Match> matches;
    private bool isCollapsed = true;

    protected override async Task OnInitializedAsync()
    {
        var teams = await sessionStorage.GetItemAsync<List<Team>>("TheBlueAlliance.AllTeams");
        var team = teams.SingleOrDefault(i => i.TeamNumber == TeamNumber);
        if (team is null)
        {
            navigationManager.NavigateTo("");
            return;
        }

        teamName = team.Nickname;
        
        selectedEvent = await localStorage.GetItemAsync<Event>("EventSelector/SelectedEventKey");
        if (selectedEvent == null)
        {
            return;
        }
        var format = await http.GetJson<ScoutFormFormatDto>($"ScoutFormFormat/ByYear/{selectedEvent.Year}");
        var result = await http.GetJson<List<FormDto>>($"ScoutForm/GetAllByTeam/{TeamNumber}/{selectedEvent.Key}");
        calculatedScoutDataByStages = new Dictionary<string, List<TeamFieldAverage>>();
        foreach (var fieldsInStage in format.FieldsInStages)
        {
            calculatedScoutDataByStages.Add(fieldsInStage.Name, 
                TeamDataAnalyzer.CalculateDataFor(fieldsInStage, result, _ => true));
        }
        
        data = result.OrderBy(i => i.KeyName).ToList();
        matches = (await http.GetJson<List<Match>>
            ("TheBlueAlliance/GetMatchesByTeamAndEvent/" + TeamNumber + "/" + selectedEvent.Key))
            .OrderBy(i => i.Date).ToList();
        
        var pirScoutFormat = await http.GetJson<ScoutFormFormatDto>($"ScoutFormFormat/ByYear/{selectedEvent.Year}/{ScoutFormType.Pit}");
        pitScoutForms = await http.GetJson<List<FormDto>>($"ScoutForm/GetAllByTeam/{TeamNumber}/{selectedEvent.Key}/{ScoutFormType.Pit}");
        calculatedPitScoutDataByStages = new Dictionary<string, List<TeamFieldAverage>>();
        foreach (var fieldsInStage in pirScoutFormat.FieldsInStages)
        {
            calculatedPitScoutDataByStages.Add(fieldsInStage.Name, 
                TeamDataAnalyzer.CalculateDataFor(fieldsInStage, pitScoutForms, _ => true, true));
        }
    }

    private async Task OnTeamClicked(TeamInMatch teamInMatch)
    {
        if (teamInMatch.TeamNumber != TeamNumber)
        {
            navigationManager.NavigateTo("TeamDetails/" + teamInMatch.TeamNumber);
            await OnInitializedAsync();
            StateHasChanged();
            return;
        }
        await jsRuntime.InvokeVoidAsync("open", $"ScoutForm/View/{teamInMatch.Form.Id}", "_blank");
    }
}
