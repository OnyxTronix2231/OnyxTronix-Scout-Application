@page "/TeamDetails/{teamNumber:int}"
@inject HttpClientManager Http
@inject ILocalStorageService LocalStorage
@inject TeamDataAnalyzer TeamDataAnalyzer
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = Roles.Scouter)]

@if (endGameCalculatedData != null)
{
    <h3>Team @teamNumber</h3>
    <h4>@selectedEvent?.Name</h4>
    <a href="/TeamDetails/Notes/@teamNumber">Notes</a>

    <br />
    <h5>Autonomous</h5>
    <TeamAnalyticGrid CalculatedData="autoCalculatedData"></TeamAnalyticGrid>
    <br />
    <h5>Teleoperated</h5>
    <TeamAnalyticGrid CalculatedData="teleopCalculatedData"></TeamAnalyticGrid>
    <br />
    <h5>End game</h5>
    <TeamAnalyticGrid CalculatedData="endGameCalculatedData"></TeamAnalyticGrid>
    <br />
    <MatchesGrid Matches="matches" TeamNumber="teamNumber" SubmittedForms="data" OnTeamClicked="OnTeamClicked"></MatchesGrid>
}
@code {
    [Parameter]
    public int teamNumber { get; set; }
    private Event selectedEvent;
    private List<ScoutFormDto> data;
    private List<TeamFieldAverage> autoCalculatedData;
    private List<TeamFieldAverage> teleopCalculatedData;
    private List<TeamFieldAverage> endGameCalculatedData;
    private List<Match> matches;

    protected override async Task OnInitializedAsync()
    {
        selectedEvent = await LocalStorage.GetItemAsync<Event>("EventSelector/SelectedEventKey");
        if (selectedEvent == null)
        {
            return;
        }
        var formate = await Http.GetJson<ScoutFormFormatDto>("ScoutFormFormat/ByYear/" + selectedEvent.Year);
        var result = await Http.GetJson<List<ScoutFormDto>>("ScoutForm/GetAllByTeam/" + teamNumber + "/" + selectedEvent.Key);
        data = result.OrderBy(i => i.MatchName).ToList();
        var matches = await Http.GetJson<List<Match>>("TheBlueAlliance/GetMatchesByTeamAndEvent/" + teamNumber + "/" + selectedEvent.Key);
        this.matches = matches.OrderBy(i => i.Date).ToList();
        autoCalculatedData = TeamDataAnalyzer.CalculateDataFor(formate.AutonomousFields, result, scoutForm => scoutForm.AutonomousData, s => true);
        teleopCalculatedData = TeamDataAnalyzer.CalculateDataFor(formate.TeleoperatedFields, result, scoutForm => scoutForm.TeleoperatedData, s => true);
        endGameCalculatedData = TeamDataAnalyzer.CalculateDataFor(formate.EndGameFields, result, scoutForm => scoutForm.EndGameData, s => true);
    }

    private void OnTeamClicked(TeamInMatch teamInMatch)
    {
        if (teamInMatch.TeamNumber != teamNumber)
        {
            NavigationManager.NavigateTo("TeamDetails/" + teamInMatch.TeamNumber, true);
        }
    }
}