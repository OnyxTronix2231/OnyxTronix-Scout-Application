@for (int i = 0; i < Fields.Count; i++)
{
    int currentIndex = i;
    <div class="e-icons">
        <SfButton type="button" CssClass="e-danger" @onclick="() => RemoveField(currentIndex)">Remove field</SfButton>
        <SfButton Disabled="@(currentIndex == 0)" type="button" CssClass="e-primary e-round"
                  IconCss="e-icons e-triangleUp" @onclick="() => MoveUp(currentIndex)">
        </SfButton>
        <SfButton Disabled="@(currentIndex == Fields.Count - 1)" type="button" CssClass="e-primary e-round"
                  IconCss="e-icons e-triangleDown" @onclick="() => MoveDown(currentIndex)">
        </SfButton>
    </div>
    FieldDto field = Fields[i];
    <div>
        <label>Field name</label>
        <InputText class="form-control" @bind-Value="field.Name"/>
        <ValidationMessage For="@(() => field.Name)"/>
    </div>
    <div>
        <label>Field type</label>
        <select class="form-control" @bind="field.FieldType">
            @foreach (var type in Enum.GetValues(typeof(FieldType)))
            {
                <option value="@type">@type</option>
            }
        </select>
        <ValidationMessage For="@(() => field.FieldType)"/>
    </div>
    <br/>
    <div class="form-group" style="padding-left:2em">
        @switch (field.FieldType)
        {
            case FieldType.None:
                break;
            case FieldType.TextField:
                <TextFieldComponent Field="field" IsEditMode="true" @bind-Value="field.TextDefaultValue">

                </TextFieldComponent>
                break;
            case FieldType.Numeric:
                <NumricFieldComponent Field="field" IsEditMode="true" @bind-Value="field.NumericDefaultValue">

                </NumricFieldComponent>

                break;
            case FieldType.Boolean:
                <BooleanFieldComponent Field="field" IsEditMode="true" @bind-Value="field.BoolDefaultValue">

                </BooleanFieldComponent>
                break;
            case FieldType.CascadeField:
                <BooleanFieldComponent Field="field" IsEditMode="true" @bind-Value="field.CascadeConditionDefaultValue">

                </BooleanFieldComponent>

                @*<div class="form-group" style="padding-left:1em">*@
                <FieldsEditor Fields="field.CascadeFields"></FieldsEditor>
                @*</div>*@
                break;
            case FieldType.OptionSelect:
                <OptionSelectFieldComponent Field="field" IsEditMode="true" @bind-Value="field.TextDefaultValue">

                </OptionSelectFieldComponent>
                break;
            case FieldType.MultipleChoice:
                <MultipleChoiceComponent Field="field" IsEditMode="true" @bind-Value="field.DefaultSelectedOptions">

                </MultipleChoiceComponent>
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
    </div>
}
<div>
    <button type="button" class="btn btn-dark" @onclick="AddField">Add field</button>
</div>

@code{

    [Parameter]
    public List<FieldDto> Fields { get; set; }

    private void AddField()
    {
        if (Fields.Count <= 24)
        {
            Fields.Add(new FieldDto {Index = Fields.Count});
        }
    }

    private void RemoveField(int index)
    {
        Fields.RemoveAt(index);
    }

    private void OnOptionSelect(ChangeEventArgs e, int index)
    {
        Fields[index].FieldType = Enum.Parse<FieldType>(e.Value.ToString());
    }

    private void MoveUp(int index)
    {
        var field = Fields[index];
        Fields.RemoveAt(index);
        Fields.Insert(index - 1, field);
    }

    private void MoveDown(int index)
    {
        var field = Fields[index];
        Fields.RemoveAt(index);
        Fields.Insert(index + 1, field);
    }

}


<style>
    .e-triangleDown:before {
        content: '\e744';
    }
    
     .e-triangleUp:before {
            content: '\e721';
        }
</style>
