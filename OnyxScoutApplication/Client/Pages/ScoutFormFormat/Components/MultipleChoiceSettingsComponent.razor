@using Syncfusion.Blazor.Inputs
@inherits SettingsInputBase
<div>
    <label>Field default value</label>
    <MultipleChoiceFieldComponent @bind-Value="@Field.DefaultSelectedOptions" 
                                    MaximumSelectionLength="Field.MaximumSelectionLength" Options="@Field.Options"/>
</div>
<div>
    <SfCheckBox Label="Required" CssClass="e-big" @bind-Checked="Field.Required"/>
    <ValidationMessage For="@(() => Field.Required)"/>
</div>

<div>
    <label>Max slsection option</label>
    <SfNumericTextBox @bind-Value="Field.MaximumSelectionLength"></SfNumericTextBox>
</div>

<br/>

@foreach (var (item, index) in Field.Options.Select((x, i) => (x, i)))
{
    <div>
        <button type="button" class="btn btn-danger" @onclick="() => RemoveOption(index)">Remove option</button>
        @{ var v = item; }
        <SfTextBox Value="@v.Name" Input="a => UpdateOption(a, index)"></SfTextBox>

    </div>
}
<ValidationMessage For="@(() => Field.Options)"/>

<br/>

<div>
    <button type="button" class="btn btn-dark" @onclick="AddOption">Add option</button>
</div>

@code {

    protected override Task OnInitializedAsync()
    {
        //options = Field.Options.ToList();
        return base.OnInitializedAsync();
    }

    private void AddOption()
    {
        Field.Options.Add(new OptionDto());
    }

    private void RemoveOption(int index)
    {
        Field.Options.RemoveAt(index);
    }

    private void UpdateOption(InputEventArgs args, int index)
    {
        Field.Options[index].Name = args.Value;
        StateHasChanged();
    }

}
