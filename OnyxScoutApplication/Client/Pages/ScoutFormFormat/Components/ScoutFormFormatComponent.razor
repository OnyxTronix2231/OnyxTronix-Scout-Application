@using OnyxScoutApplication.Shared.Models.ScoutFormFormatModels
<EditForm Model="@ScoutFormFormat" OnValidSubmit="@OnValidSubmit">
    <FluentValidationValidator DisableAssemblyScanning="@true"/>
    <ValidationSummary/>

    <div class="form-group col-sm-5">
        <div>
            <label>Year</label>
            <InputNumber class="form-control" @bind-Value="ScoutFormFormat.Year"/>
            <ValidationMessage For="@(() => ScoutFormFormat.Year)"/>
        </div>
        <br/>
    </div>
    <div class="form-group col-sm-5">
        <div>
            <label>Stage name</label>
            <SfTextBox @bind-Value="newStageName"/>
        </div>
        <div>
            <label>Stage name</label>
            <SfButton type="button" @onclick="OnAddStageClick" >Add stage</SfButton>
        </div>
        <br/>
    </div>
    
     @foreach(var fieldsInStage in ScoutFormFormat.FieldsInStages)
     {
         Console.WriteLine(fieldsInStage.Index);
         <div class="e-icons">
             <h3>@fieldsInStage.Name</h3>
             <SfButton type="button" CssClass="e-danger" @onclick="() => RemoveStage(fieldsInStage)">Remove stage</SfButton>
             <SfButton Disabled="@(fieldsInStage.Index <= 0)" type="button" CssClass="e-primary e-round"
                       IconCss="e-icons e-triangleUp" @onclick="() => MoveUp(fieldsInStage)">
             </SfButton>
             <SfButton Disabled="@(fieldsInStage.Index >= ScoutFormFormat.FieldsInStages.Count - 1)" type="button" CssClass="e-primary e-round"
                       IconCss="e-icons e-triangleDown" @onclick="() => MoveDown(fieldsInStage)">
             </SfButton>
         </div>
         <FieldsEditor Fields="fieldsInStage.Fields"></FieldsEditor>
     }

    <br/>
    @{ var v = Type == FormType.Create ? "Add" : "Save"; }
    <button type="submit" class="btn btn-primary">@v</button>
</EditForm>

@code {

    [Parameter]
    public ScoutFormFormatDto ScoutFormFormat { get; set; }

    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [Parameter]
    public FormType Type { get; set; }

    private string newStageName;

    private void OnValidSubmit()
    {
       // ScoutFormFormat.FieldsInStages.ToList().ForEach(i => i.Fields.RemoveAll(f => f.FieldType == FieldType.None || string.IsNullOrWhiteSpace(f.Name)));
        for (var i = 0; i < ScoutFormFormat.FieldsInStages.Count; i++)
        {
            ScoutFormFormat.FieldsInStages[i].Index = i;
        }
        ScoutFormFormat.FieldsInStages.ForEach(i => UpdateFieldIndex(i.Fields));
        OnSubmit.InvokeAsync(this);
    }

    private void UpdateFieldIndex(List<FieldDto> fields)
    {
        for (var i = 0; i < fields.Count; i++)
        {
            fields[i].Index = i;
            UpdateFieldIndex(fields[i].CascadeFields);
        }
    }

    private void OnAddStageClick()
    {
        if (string.IsNullOrEmpty(newStageName))
        {
            return;
        }

        if (ScoutFormFormat.FieldsInStages.Any(i => i.Name == newStageName))
        {
            return;
        }
        ScoutFormFormat.FieldsInStages.Add(new FieldsInStageDto() { Name = newStageName, Index = ScoutFormFormat.FieldsInStages.Count});
    }
    
    private void RemoveStage(FieldsInStageDto stage)
    {
        ScoutFormFormat.FieldsInStages.Remove(stage);
    }
    
    private void MoveUp(FieldsInStageDto stage)
    {
        ScoutFormFormat.FieldsInStages.RemoveAt(stage.Index);
        ScoutFormFormat.FieldsInStages.Insert(stage.Index - 1, stage);
    }

    private void MoveDown(FieldsInStageDto stage)
    {
        ScoutFormFormat.FieldsInStages.RemoveAt(stage.Index);
        ScoutFormFormat.FieldsInStages.Insert(stage.Index + 1, stage);
    }

}
