@page "/LocalScoutForms"
@using OnyxScoutApplication.Shared.Models.ScoutFormModels
@using System.Security.Claims
@using FailureEventArgs = Syncfusion.Blazor.Inputs.FailureEventArgs
@inject NavigationManager NavigationManager
@inject HttpClientManager Http
@inject ILocalStorageService LocalStorage
@attribute [OnyxAuthorize(Role = Role.Scouter)]
<h1>Scout forms</h1>
@if (scoutForms == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <SfButton  CssClass="e-success" @onclick="UploadAllAndDeleteLocally">
        Upload all and delete locally
    </SfButton>
    <SfGrid FrozenColumns="1" AllowTextWrap="false" DataSource="@scoutForms"
            AllowFiltering="true" AllowResizing="false" AllowSorting="true" AllowMultiSorting="true"
            ShowColumnChooser="true" Width="100%" Height="100%">
        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
        <GridColumns>
            <GridColumn ShowInColumnChooser="false" HeaderText="Team" Field="TeamNumber" 
                        AllowFiltering="true"
                        FilterSettings="@(new FilterSettings { Type = Syncfusion.Blazor.Grids.FilterType.CheckBox })"
                        Width="70px">
            </GridColumn>
            
            <GridColumn AutoFit="true" ShowInColumnChooser="false" HeaderText="Year" Field="Year"
                        AllowFiltering="true" 
                        FilterSettings="@(new FilterSettings { Type = Syncfusion.Blazor.Grids.FilterType.Excel })">
            </GridColumn>
            
            <GridColumn AutoFit="true" ShowInColumnChooser="false" HeaderText="Key name" Field="KeyName"
                        AllowFiltering="true" Type="ColumnType.String"
                        FilterSettings="@(new FilterSettings { Type = Syncfusion.Blazor.Grids.FilterType.Excel })">
            </GridColumn>
            
            <GridColumn  AutoFit="true" ShowInColumnChooser="false" HeaderText="Writer user name" Field="WriterUserName"
                         AllowFiltering="true" Type="ColumnType.String"
                         FilterSettings="@(new FilterSettings { Type = Syncfusion.Blazor.Grids.FilterType.Excel })">
            </GridColumn>
            
    
            <GridColumn AutoFit="true" AllowReordering="false" ShowInColumnChooser="false" HeaderText=""
                        Field="" AllowFiltering="false">
                <Template>
                    @{
                        var scoutForm = (FormDto)context;
                        <div>
                            <SfButton  CssClass="e-success" @onclick="() => UploadAndDeleteLocally(scoutForm)">
                                Upload and delete locally
                            </SfButton>
                            
                            <SfButton CssClass="e-danger" @onclick="() => DeleteFromLocalCache(scoutForm)">
                                Delete from local cache
                            </SfButton>
                        </div>
                    }
                </Template>
            </GridColumn>
            
    
    
        </GridColumns>
    </SfGrid>
}


@code {
    
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    private ClaimsPrincipal user;
    private List<FormDto> scoutForms;
    private Event selectedEvent;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        user = authState.User;
        
        if (!await LocalStorage.ContainKeyAsync("EventSelector/SelectedEventKey"))
        {
            NavigationManager.NavigateTo("/");
            return;
        }
        selectedEvent = await LocalStorage.GetItemAsync<Event>("EventSelector/SelectedEventKey");
        
        await UpdateLocalScoutForms();
    //        await LocalStorage.SetItemAsync($"ScoutForm/{form.KeyName}/{form.TeamNumber}" ,form);
    }

    private async Task UpdateLocalScoutForms()
    {
        var keys = await LocalStorage.KeysAsync();
        keys = keys.Where(k => k.StartsWith("ScoutForm/")).Where(k => k.Contains(selectedEvent.Key));
        scoutForms = new List<FormDto>();
        foreach (var key in keys)
        {
            scoutForms.Add(await LocalStorage.GetItemAsync<FormDto>(key));
        }
        StateHasChanged();
    }

    private async Task DeleteFromLocalCache(FormDto scoutForm)
    {
        await LocalStorage.RemoveItemAsync($"ScoutForm/{scoutForm.KeyName}/{scoutForm.TeamNumber}");
        await UpdateLocalScoutForms();
    }

    private async Task UploadAndDeleteLocally(FormDto scoutForm)
    {
        if (await Http.TryPostJson("ScoutForm", scoutForm))
        {
            await DeleteFromLocalCache(scoutForm);
        }
    }

    private async Task UploadAllAndDeleteLocally()
    {
        foreach (var scoutForm in scoutForms)
        {
            await UploadAndDeleteLocally(scoutForm);
        }
    }

}
