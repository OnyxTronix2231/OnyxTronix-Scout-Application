@page "/ScoutForm/Create"
@using OnyxScoutApplication.Shared.Models.ScoutFormModels
@inject HttpClientManager http
@inject NavigationManager navigationManager
@inject ILocalStorageService localStorage
@inject NotificationManager notificationManager
@attribute [OnyxAuthorize(Role = Role.Scouter)]

@if (form != null)
{
    <h3>Scout form</h3>
    <br>
    <div style="float: right;">
        <SfButton type="button" CssClass="e-success" @onclick="SaveOnLocalCache">Save locally</SfButton>
        <SfButton type="button" CssClass="e-danger" @onclick="DeleteLocalCache">Delete local cache</SfButton>
    </div>
    <ScoutFromComponent IsBlue="@isBlue" Form="form" Type="FormType.Create" OnValidSubmit="OnValidSubmit"></ScoutFromComponent>
}

@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private TeamInMatch teamInMatch;
    private FormDto form;
    private bool isBlue;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        var user = authState.User;

        teamInMatch = await localStorage.GetItemAsync<TeamInMatch>("ScoutForm/TeamInMatch");
        isBlue = teamInMatch.Match.Alliances.Blue.TeamKeys.Any(i => i.Contains(teamInMatch.TeamNumber.ToString()));
        
        var newForm = await http.GetJson<FormDto>("ScoutFormFormat/TemplateScoutFormByYear/" + teamInMatch.Match.Date.Year);
        if (newForm == null)
        {
            navigationManager.NavigateTo("/");
            return;
        }
        
        if(await localStorage.ContainKeyAsync($"ScoutForm/{teamInMatch.Match.Key}/{teamInMatch.TeamNumber}"))
        {
            form = await localStorage.GetItemAsync<FormDto>($"ScoutForm/{teamInMatch.Match.Key}/{teamInMatch.TeamNumber}");
            return;
        }
        
        newForm.TeamNumber = teamInMatch.TeamNumber;
        newForm.Year = teamInMatch.Match.Date.Year;
        newForm.Type = ScoutFormType.MainGame;
        newForm.KeyName = teamInMatch.Match.Key;
        newForm.WriterUserName = user.Identity!.Name;
        form = newForm;
    }

    private async Task OnValidSubmit()
    {
        if (await http.TryPostJson("ScoutForm", form))
        {
            navigationManager.NavigateTo("/");
            return;
        }
        await SaveOnLocalCache();
        notificationManager.Notify("Error", "Error saving form in server\nThe form was saved localy for now", NotificationType.Warning);
    }

    private async Task SaveOnLocalCache()
    {
        await localStorage.SetItemAsync($"ScoutForm/{form.KeyName}/{form.TeamNumber}" ,form);
    }
    
    private async Task DeleteLocalCache()
    {
        if (!await localStorage.ContainKeyAsync($"ScoutForm/{form.KeyName}/{form.TeamNumber}"))
        {
            notificationManager.Notify("No form was found on local cache!", "", NotificationType.Warning);
            return;
        }
        await localStorage.RemoveItemAsync($"ScoutForm/{form.KeyName}/{form.TeamNumber}");
    }
}

