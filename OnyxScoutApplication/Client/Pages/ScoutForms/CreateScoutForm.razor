@page "/ScoutForm/Create"
@inject HttpClientManager Http
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@attribute [Authorize(Roles = Roles.Scouter)]

@if (scoutForm != null)
{
    <h3>ScoutForm</h3>
    <ScoutFromComponent ScoutForm="scoutForm" Type="FormType.Create" OnValidSubmit="OnValidSubmit"></ScoutFromComponent>
}

@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private TeamInMatch teamInMatch;
    private ScoutFormDto scoutForm;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        var user = authState.User;

        teamInMatch = await LocalStorage.GetItemAsync<TeamInMatch>("ScoutForm/TeamInMatch");
        scoutForm = await Http.GetJson<ScoutFormDto>("ScoutFormFormat/TemplateScoutFormByYear/ " + teamInMatch.Match.Date.Year);
        if (scoutForm == null)
        {
            NavigationManager.NavigateTo("/");
            return;
        }
        scoutForm.TeamNumber = teamInMatch.TeamNumber;
        scoutForm.Year = teamInMatch.Match.Date.Year;
        scoutForm.MatchName = teamInMatch.Match.Key;
        scoutForm.WriterUserName = user.Identity.Name;
    }

    private async Task OnValidSubmit()
    {
        if (await Http.TryPostJson("ScoutForm", scoutForm))
        {
            NavigationManager.NavigateTo("/");
        }
    }

}
