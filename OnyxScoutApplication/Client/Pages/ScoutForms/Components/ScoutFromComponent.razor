@using OnyxScoutApplication.Shared.Models.ScoutFormModels
@using System.Net.Http.Headers
@inject ISessionStorageService sessionStorage


<h4>@team?.Nickname</h4>
<EditForm Model="@Form" OnValidSubmit="@OnValidSubmit">
    <FluentValidationValidator/>
    <ValidationSummary/>
    <div class="form-group col-sm-5">
        <label for="teamNumber">Team number</label>
        <input class="form-control" style="@(TeamAllianceType switch
                                           {
                                               TeamAlliance.Blue => "background-color: #5c5cff",
                                               TeamAlliance.Red => "background-color: #ff4949",
                                               _ => ""
                                               })" 
               type="number" id="teamNumber" value="@Form.TeamNumber" readonly="readonly"/>
    </div>
    <div class="form-group col-sm-5">
        <label for="year">Year</label>
        <input class="form-control" type="number" id="year" value="@Form.Year" readonly="readonly"/>
    </div>
    <div class="form-group col-sm-5">
        <label for="matchName">Key name</label>
        <input class="form-control" type="text" id="matchName" value="@Form.KeyName" readonly="readonly"/>
    </div>
    <div class="form-group col-sm-5">
        <label for="matchName">Writer</label>
        <input class="form-control" type="text" id="matchNumber" value="@Form.WriterUserName" readonly="readonly"/>
    </div>
    @if (ShowImageUpload)
    {
        <div class="form-group col-sm-5">
            <InputFile type="file" accept="image/*" OnChange="ImageSet"></InputFile>
        </div>
    }
    <div class="form-group col-sm-5">
        @foreach (var formDataInStages in Form.FormDataInStages)
        {
            <h3>@formDataInStages.Name</h3>

            <br>
            <div class="form-group" style="padding-left:2em">
                <SectionEdit FormType="@Type" SectionData="@formDataInStages.FormData"></SectionEdit>
            </div>
        }
    </div>

    @if (Type != FormType.View)
    {
        <div>
            <button type="submit" class="btn btn-primary">@(Type == FormType.Create ? "Add" : "Save")</button>
        </div>
    }
</EditForm>

@code {

    [Parameter]
    public FormDto Form { get; set; }

    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    public FormType Type { get; set; }
    
    [Parameter]
    public bool ShowImageUpload { get; set; }
    
    [Parameter]
    public TeamInMatch TeamInMatch { get; set; }
    
    [Parameter]
    public TeamAlliance TeamAllianceType { get; set; }
    
    public MultipartFormDataContent Content { get; private set; }

    private Team team;
    
    long maxFileSize = 1024 * 1024 * 15;

    protected override async Task OnInitializedAsync()
    {
        var teams = await sessionStorage.GetItemAsync<List<Team>>("TheBlueAlliance.AllTeams");
        team = teams.SingleOrDefault(i => i.TeamNumber == Form.TeamNumber);
        TeamAllianceType = 
            TeamInMatch != null ? 
            TeamInMatch.Match.Alliances.IsInTeamBlue(TeamInMatch.TeamNumber) ?
                TeamAlliance.Blue : TeamInMatch.Match.Alliances.IsInTeamRed(TeamInMatch.TeamNumber) ?
                    TeamAlliance.Red : TeamAlliance.Unknown
            :
        TeamAlliance.Unknown;
    }

    private void ImageSet(InputFileChangeEventArgs e)
    {
        var fileContent = 
            new StreamContent(e.File.OpenReadStream(maxFileSize));

        fileContent.Headers.ContentType = 
            new MediaTypeHeaderValue(e.File.ContentType);
        
        Content = new MultipartFormDataContent();

        Content.Add(
            content: fileContent,
            name: "\"files\"",
            fileName: e.File.Name);
    }

    public enum TeamAlliance
    {
        Blue,
        Red,
        Unknown
    }

}

<style>
    .e-input-group .e-input-group-icon, .e-input-group.e-control-wrapper .e-input-group-icon {
        min-height: 35px;
        min-width: 35px;
    }
    
    
</style>
