@using OnyxScoutApplication.Shared.Models.ScoutFormModels
@using System.Net.Http.Headers
@inject ISessionStorageService SessionStorage


<h4>@team?.Nickname</h4>
<EditForm Model="@Form" OnValidSubmit="@OnValidSubmit">
    <FluentValidationValidator/>
    <ValidationSummary/>
    <div class="form-group col-sm-5">
        <label for="teamNumber">Team number</label>
        <input class="form-control" disabled="@(!EmergencyMode)" style="@(TeamAllianceType switch
                                                                        {
                                                                            TeamAlliance.Blue => "background-color: #5c5cff",
                                                                            TeamAlliance.Red => "background-color: #ff4949",
                                                                            _ => ""
                                                                            })" 
               type="number" id="teamNumber" @bind="@Form.TeamNumber"/>
        <ValidationMessage For="@(() => Form.TeamNumber)"/>
    </div>
    <div class="form-group col-sm-5">
        <label for="year">Year</label>
        <input class="form-control" type="number" id="year" @bind="@Form.Year" readonly/>
    </div>
    <div class="form-group col-sm-5">
        <label for="eventName">Event name</label>
        <input class="form-control" disabled="@true" type="text" id="eventName" @bind="@Form.EventName"/>
    </div>
    @if (!ShowImageUpload)
    {
        <div class="form-group col-sm-5">
            <label for="matchType">Match type</label>
            <SfDropDownList id="matchType" Enabled="@(EmergencyMode)" TValue="string" TItem="string" DataSource="matchTypes" @bind-Value="@Form.MatchType">
            </SfDropDownList>
        </div>
        <div class="form-group col-sm-5">
            <label for="matchNumber">Match number</label>
            <input class="form-control" disabled="@(!EmergencyMode)" min="0" type="number" id="matchNumber" @bind="@Form.MatchNumber"/>
            <ValidationMessage For="@(() => Form.MatchNumber)"/>
        </div>
    }
    <div class="form-group col-sm-5">
        <label for="writer">Writer</label>
        <input class="form-control" type="text" id="writer" @bind="@Form.WriterUserName" readonly/>
    </div>
    @if (ShowImageUpload)
    {
        <div class="form-group col-sm-5">
            <InputFile type="file" accept="image/*" OnChange="ImageSet"></InputFile>
        </div>
    }
    <div class="form-group col-sm-5">
        @foreach (var formDataInStages in Form.FormDataInStages)
        {
            <h3>@formDataInStages.Name</h3>

            <br>
            <div class="form-group" style="padding-left:2em">
                <SectionEdit FormType="@Type" SectionData="@formDataInStages.FormData"></SectionEdit>
            </div>
        }
    </div>

    @if (Type != FormType.View)
    {
        <div>
            <button type="submit" class="btn btn-primary">@(Type == FormType.Create ? "Add" : "Save")</button>
        </div>
    }
</EditForm>

@code {

    [Parameter]
    public FormDto Form { get; set; }

    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    public FormType Type { get; set; }
    
    [Parameter]
    public bool ShowImageUpload { get; set; }
    
    [Parameter]
    public bool EmergencyMode { get; set; }
    
    [Parameter]
    public TeamInMatch TeamInMatch { get; set; }

    [Parameter]
    public TeamAlliance TeamAllianceType { get; set; }
    
    public MultipartFormDataContent Content { get; private set; }

    private Team team;

    private List<string> matchTypes;

    long maxFileSize = 1024 * 1024 * 15;

    protected override async Task OnInitializedAsync()
    {
        matchTypes = new List<string>
        {
            "qm",
            "qf1m",
            "qf2m",
            "qf3m",
            "qf4m",
            "sf1m",
            "sf2m",
            "sf3m",
            "sf4m",
            "sf5m",
            "sf6m",
            "sf7m",
            "sf8m",
            "sf9m",
            "sf10m",
            "sf11m",
            "sf12m",
            "sf13m",
            "f1m",
            "f2m"
        };
        
        var teams = await SessionStorage.GetItemAsync<List<Team>>("TheBlueAlliance.AllTeams");
        team = teams.SingleOrDefault(i => i.TeamNumber == Form.TeamNumber);
        TeamAllianceType = 
            TeamInMatch != null ? 
            TeamInMatch.Match.Alliances.IsInTeamBlue(TeamInMatch.TeamNumber) ?
                TeamAlliance.Blue : TeamInMatch.Match.Alliances.IsInTeamRed(TeamInMatch.TeamNumber) ?
                    TeamAlliance.Red : TeamAlliance.Unknown
            :
        TeamAlliance.Unknown;
    }

    private void ImageSet(InputFileChangeEventArgs e)
    {
        var fileContent = 
            new StreamContent(e.File.OpenReadStream(maxFileSize));

        fileContent.Headers.ContentType = 
            new MediaTypeHeaderValue(e.File.ContentType);
        
        Content = new MultipartFormDataContent();

        Content.Add(
            content: fileContent,
            name: "\"files\"",
            fileName: e.File.Name);
    }

    public enum TeamAlliance
    {
        Blue,
        Red,
        Unknown
    }

}

<style>
    .e-input-group .e-input-group-icon, .e-input-group.e-control-wrapper .e-input-group-icon {
        min-height: 35px;
        min-width: 35px;
    }
    
    
</style>
