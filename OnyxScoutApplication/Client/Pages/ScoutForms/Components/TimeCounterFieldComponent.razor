@using System.Timers
@using System.Diagnostics
@using System.Diagnostics.CodeAnalysis
@inherits InputBase<TimeSpan?>

@if (FormType == FormType.Create)
{
    <div>
        <SfButton type="button" @onclick="StartCount">Start count</SfButton>
    </div>
    <br>
    <div>
        <label>@CurrentValue?.ToString(@"mm\:ss\.fff")</label>
        @if (AllowManualInput)
        {
            <SfTimePicker TValue="TimeSpan?" Format="mm\:ss\.fff" @bind-Value="@CurrentValue"/>
        }
    </div>
    <br>
    <div>
        <SfButton type="button" @onclick="StopCount">Stop count</SfButton>
        <SfButton type="button" @onclick="ResetCountAndUpdate">Reset count</SfButton>
    </div>
}
else
{
    <div>
        <label>@CurrentValue?.ToString(@"mm\:ss\.fff")</label>
        <SfTimePicker @ref="@timePicker" TValue="TimeSpan?" Format="mm\:ss\.fff" @bind-Value="@CurrentValue"/>
    </div>
    
}


@code {

    [Parameter]
    public FormType FormType { get; set; }
    [Parameter]
    public bool AllowManualInput { get; set; }

    private SfTimePicker<TimeSpan?> timePicker;

    private Timer timer;
    private Stopwatch stopwatch;

    protected override void OnInitialized()
    {
        timer = new Timer(100);
        stopwatch = new Stopwatch();
        timer.Elapsed += (sender, args) => { UpdateCurrentTime(); };
    }

    private void StartCount()
    {
        timer.Start();
        stopwatch.Start();
    }

    private void StopCount()
    {
        timer.Stop();
        stopwatch.Stop();
        UpdateCurrentTime();
    }

    private void ResetCount()
    {
        timer.Stop();
        stopwatch.Reset();
    }
    
    private void ResetCountAndUpdate()
    {
        ResetCount();
        UpdateCurrentTime();
    }

    private void UpdateCurrentTime()
    {
        CurrentValue = stopwatch.Elapsed;
        Console.WriteLine(CurrentValue);
        StateHasChanged();
    }

    protected override bool TryParseValueFromString(string value, out TimeSpan? result, [NotNullWhen(false)] out string validationErrorMessage)
    {
        validationErrorMessage = null;
        if (string.IsNullOrWhiteSpace(value))
        {
            result = null;
            return true;
        }
        bool success = TimeSpan.TryParse(value, out TimeSpan val);
        if (!success)
        {
            validationErrorMessage = "Value has to be a valid time span!";
        }
        result = val;
        return success;
    }

}
