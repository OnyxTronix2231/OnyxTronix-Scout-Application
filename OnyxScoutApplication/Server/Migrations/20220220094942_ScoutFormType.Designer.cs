// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnyxScoutApplication.Server.Data;

namespace OnyxScoutApplication.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220220094942_ScoutFormType")]
    partial class ScoutFormType
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.13");

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(85)
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(85)
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("RoleId")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.Property<string>("Name")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OnyxScoutApplication.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("OnyxScoutApplication.Shared.Models.CustomeEventModels.CustomAlliance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CustomAlliance");
                });

            modelBuilder.Entity("OnyxScoutApplication.Shared.Models.CustomeEventModels.CustomAlliances", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("BlueId")
                        .HasColumnType("int");

                    b.Property<int?>("RedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlueId");

                    b.HasIndex("RedId");

                    b.ToTable("CustomAlliances");
                });

            modelBuilder.Entity("OnyxScoutApplication.Shared.Models.CustomeEventModels.CustomEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("OnyxScoutApplication.Shared.Models.CustomeEventModels.CustomMatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AlliancesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("Level")
                        .HasColumnType("text");

                    b.Property<int>("MatchNumber")
                        .HasColumnType("int");

                    b.Property<string>("WinningAlliance")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AlliancesId");

                    b.HasIndex("EventId");

                    b.ToTable("CustomMatch");
                });

            modelBuilder.Entity("OnyxScoutApplication.Shared.Models.CustomeEventModels.CustomTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CustomAllianceId")
                        .HasColumnType("int");

                    b.Property<string>("Nickname")
                        .HasColumnType("text");

                    b.Property<int>("TeamNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomAllianceId");

                    b.ToTable("CustomTeam");
                });

            modelBuilder.Entity("OnyxScoutApplication.Shared.Models.ScoutFormFormatModels.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AllowManualInput")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("text");

                    b.Property<int?>("FieldId")
                        .HasColumnType("int");

                    b.Property<int?>("FieldStageId")
                        .HasColumnType("int");

                    b.Property<int>("FieldType")
                        .HasColumnType("int");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<int>("MaxValue")
                        .HasColumnType("int");

                    b.Property<int>("MaximumSelectionLength")
                        .HasColumnType("int");

                    b.Property<int>("MinValue")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("Required")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("FieldStageId");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("OnyxScoutApplication.Shared.Models.ScoutFormFormatModels.FieldsInStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("ScoutFormFormatId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ScoutFormFormatId");

                    b.ToTable("FieldsInStage");
                });

            modelBuilder.Entity("OnyxScoutApplication.Shared.Models.ScoutFormFormatModels.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FieldId")
                        .HasColumnType("int");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<float>("PercentWeight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.ToTable("Option");
                });

            modelBuilder.Entity("OnyxScoutApplication.Shared.Models.ScoutFormFormatModels.ScoutFormFormat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ScoutFormType")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ScoutFormFormats");
                });

            modelBuilder.Entity("OnyxScoutApplication.Shared.Models.ScoutFormModels.Form", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("MatchName")
                        .HasColumnType("text");

                    b.Property<int>("TeamNumber")
                        .HasColumnType("int");

                    b.Property<string>("WriterUserName")
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ScoutForms");
                });

            modelBuilder.Entity("OnyxScoutApplication.Shared.Models.ScoutFormModels.FormData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FieldId")
                        .HasColumnType("int");

                    b.Property<int?>("FormDataId")
                        .HasColumnType("int");

                    b.Property<int?>("FormDataStageId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("FormDataId");

                    b.HasIndex("FormDataStageId");

                    b.ToTable("FormData");
                });

            modelBuilder.Entity("OnyxScoutApplication.Shared.Models.ScoutFormModels.FormDataInStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("FormId")
                        .HasColumnType("int");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.ToTable("FormDataInStage");
                });

            modelBuilder.Entity("OnyxScoutApplication.Server.Models.ApplicationRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("ApplicationRole");
                });

            modelBuilder.Entity("OnyxScoutApplication.Server.Models.ApplicationUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>");

                    b.Property<string>("ApplicationRoleId")
                        .HasColumnType("varchar(767)");

                    b.HasIndex("ApplicationRoleId");

                    b.HasDiscriminator().HasValue("ApplicationUserRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OnyxScoutApplication.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OnyxScoutApplication.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OnyxScoutApplication.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnyxScoutApplication.Shared.Models.CustomeEventModels.CustomAlliances", b =>
                {
                    b.HasOne("OnyxScoutApplication.Shared.Models.CustomeEventModels.CustomAlliance", "Blue")
                        .WithMany()
                        .HasForeignKey("BlueId");

                    b.HasOne("OnyxScoutApplication.Shared.Models.CustomeEventModels.CustomAlliance", "Red")
                        .WithMany()
                        .HasForeignKey("RedId");

                    b.Navigation("Blue");

                    b.Navigation("Red");
                });

            modelBuilder.Entity("OnyxScoutApplication.Shared.Models.CustomeEventModels.CustomMatch", b =>
                {
                    b.HasOne("OnyxScoutApplication.Shared.Models.CustomeEventModels.CustomAlliances", "Alliances")
                        .WithMany()
                        .HasForeignKey("AlliancesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnyxScoutApplication.Shared.Models.CustomeEventModels.CustomEvent", "Event")
                        .WithMany("Matches")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alliances");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("OnyxScoutApplication.Shared.Models.CustomeEventModels.CustomTeam", b =>
                {
                    b.HasOne("OnyxScoutApplication.Shared.Models.CustomeEventModels.CustomAlliance", null)
                        .WithMany("Teams")
                        .HasForeignKey("CustomAllianceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnyxScoutApplication.Shared.Models.ScoutFormFormatModels.Field", b =>
                {
                    b.HasOne("OnyxScoutApplication.Shared.Models.ScoutFormFormatModels.Field", "ParentField")
                        .WithMany("CascadeFields")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("OnyxScoutApplication.Shared.Models.ScoutFormFormatModels.FieldsInStage", "FieldsInStage")
                        .WithMany("Fields")
                        .HasForeignKey("FieldStageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("FieldsInStage");

                    b.Navigation("ParentField");
                });

            modelBuilder.Entity("OnyxScoutApplication.Shared.Models.ScoutFormFormatModels.FieldsInStage", b =>
                {
                    b.HasOne("OnyxScoutApplication.Shared.Models.ScoutFormFormatModels.ScoutFormFormat", "ScoutFormFormat")
                        .WithMany("FieldsInStages")
                        .HasForeignKey("ScoutFormFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScoutFormFormat");
                });

            modelBuilder.Entity("OnyxScoutApplication.Shared.Models.ScoutFormFormatModels.Option", b =>
                {
                    b.HasOne("OnyxScoutApplication.Shared.Models.ScoutFormFormatModels.Field", null)
                        .WithMany("Options")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnyxScoutApplication.Shared.Models.ScoutFormModels.FormData", b =>
                {
                    b.HasOne("OnyxScoutApplication.Shared.Models.ScoutFormFormatModels.Field", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnyxScoutApplication.Shared.Models.ScoutFormModels.FormData", null)
                        .WithMany("CascadeData")
                        .HasForeignKey("FormDataId");

                    b.HasOne("OnyxScoutApplication.Shared.Models.ScoutFormModels.FormDataInStage", "FormDataInStage")
                        .WithMany("FormData")
                        .HasForeignKey("FormDataStageId");

                    b.Navigation("Field");

                    b.Navigation("FormDataInStage");
                });

            modelBuilder.Entity("OnyxScoutApplication.Shared.Models.ScoutFormModels.FormDataInStage", b =>
                {
                    b.HasOne("OnyxScoutApplication.Shared.Models.ScoutFormModels.Form", "Form")
                        .WithMany("FormDataInStages")
                        .HasForeignKey("FormId");

                    b.Navigation("Form");
                });

            modelBuilder.Entity("OnyxScoutApplication.Server.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("OnyxScoutApplication.Server.Models.ApplicationRole", "Role")
                        .WithMany()
                        .HasForeignKey("ApplicationRoleId");

                    b.HasOne("OnyxScoutApplication.Server.Models.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnyxScoutApplication.Server.Models.ApplicationUser", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("OnyxScoutApplication.Shared.Models.CustomeEventModels.CustomAlliance", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("OnyxScoutApplication.Shared.Models.CustomeEventModels.CustomEvent", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("OnyxScoutApplication.Shared.Models.ScoutFormFormatModels.Field", b =>
                {
                    b.Navigation("CascadeFields");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("OnyxScoutApplication.Shared.Models.ScoutFormFormatModels.FieldsInStage", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("OnyxScoutApplication.Shared.Models.ScoutFormFormatModels.ScoutFormFormat", b =>
                {
                    b.Navigation("FieldsInStages");
                });

            modelBuilder.Entity("OnyxScoutApplication.Shared.Models.ScoutFormModels.Form", b =>
                {
                    b.Navigation("FormDataInStages");
                });

            modelBuilder.Entity("OnyxScoutApplication.Shared.Models.ScoutFormModels.FormData", b =>
                {
                    b.Navigation("CascadeData");
                });

            modelBuilder.Entity("OnyxScoutApplication.Shared.Models.ScoutFormModels.FormDataInStage", b =>
                {
                    b.Navigation("FormData");
                });
#pragma warning restore 612, 618
        }
    }
}
